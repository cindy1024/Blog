<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[frp内网渗透实现流畅远程办公]]></title>
      <url>/2020/04/30/frp%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%95%85%E8%BF%9C%E7%A8%8B%E5%8A%9E%E5%85%AC/</url>
      <content type="html"><![CDATA[<p>疫情在家，需要远程连接机器，奈何家里网速不快，在笔记本上使用向日葵和teamviewer延迟严重，于是尝试了Windows自带的远程桌面（Microsoft Remote Desktop），配置较麻烦，但使用流畅。</p>
<a id="more"></a>
<p>Windows远程桌面依靠分发指令，Teamviewer依靠图像传输。Windows桌面通过RDP协议进行远程控制，不需要额外安装。RDP（Remote Desktop Protocol）是微软开发的基于连接远程计算机的协议。局域网内远程桌面较简单，见参考[1][2]。外网远程桌面需要借助一个公网IP使用frp进行内网渗透。</p>
<h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p><a href="https://github.com/fatedier/frp" target="_blank" rel="external">frp</a> 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。</p>
<h3 id="部署架构"><a href="#部署架构" class="headerlink" title="部署架构"></a>部署架构</h3><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/architecture.png" alt=""><br>可以看出，我们需要在具有公网IP的机器上部署frps，在位于内网环境的被操控机器上部署frpc。</p>
<p><strong>个人部署环境</strong></p>
<ul>
<li>具有公网IP的机器：一台阿里云学生机 Ubuntu</li>
<li>位于内网的物理机：一台或多台被远程操控的机器 Win10</li>
<li>用户机：一台笔记本 Win10</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h4 id="在公网机器上"><a href="#在公网机器上" class="headerlink" title="在公网机器上"></a>在公网机器上</h4><ul>
<li><p>安装wget</p>
<pre class="line-numbers language-shell"><code class="language-shell">apt-get install -y wget
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>下载frp，解压并重命名</p>
<pre class="line-numbers language-shell"><code class="language-shell">wget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz
tar -zxvf frp_0.33.0_linux_amd64.tar.gz
mv frp_0.33.0_linux_amd64 frp
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>进入frp，修改配置frps.ini</p>
<pre class="line-numbers language-shell"><code class="language-shell">cd frp
vim frps.ini
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>frps.ini文件如下配置：</p>
<pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[common]</span>
# 要绑定的端口
<span class="token constant">bind_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 7000</span>
# 安全授权 token，防止端口被扫描到后可以被任意客户端连接，可自己设置
<span class="token constant">token</span> <span class="token attr-value"><span class="token punctuation">=</span> 12345678</span>

# 控制台的用户名
<span class="token constant">dashboard_user</span> <span class="token attr-value"><span class="token punctuation">=</span> user</span>
# 控制台的密码
<span class="token constant">dashboard_pwd</span> <span class="token attr-value"><span class="token punctuation">=</span> password</span>
# 控制台的端口
<span class="token constant">dashboard_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 7500</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>配置防火墙端口（阿里云ECS安全组规则）【注意】！！</p>
<ul>
<li>配置公网机器与被远程机器通信的bind_port端口</li>
<li>配置公网机器与用户客户端机器通信的remote_port端口</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200430160957.PNG" alt=""></p>
</li>
<li><p>给frp提权，运行frp</p>
<pre class="line-numbers language-shell"><code class="language-shell">sudo chmod -R 777 ~/frp 
./frps -c ./frps.ini
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>运行成功会显示<code>Start frps success</code>，不要结束命令。如需进行其他操作，可使用screen命令创建多个会话。</p>
</li>
</ul>
<h4 id="在物理机上"><a href="#在物理机上" class="headerlink" title="在物理机上"></a>在物理机上</h4><ul>
<li><p>下载win10对应版本frp并解压</p>
<p><a href="https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_windows_amd64.zip" target="_blank" rel="external">https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_windows_amd64.zip</a></p>
</li>
<li><p>修改frpc.ini</p>
<pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[common]</span>
# 公网IP
<span class="token constant">server_addr</span> <span class="token attr-value"><span class="token punctuation">=</span> xxx.xxx.xxx.xxx</span>
# 服务器上设置的服务绑定端口(frps.ini 中的 bind_port)
<span class="token constant">server_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 7000</span>
# 安全授权 token，需与服务端设置一致（可自定义，可删去）
<span class="token constant">token</span> <span class="token attr-value"><span class="token punctuation">=</span> 12345678</span>

<span class="token selector">[RDP]</span> # 反向代理名称，可以随意设置，若设置多台物理机，此处需区别命名
<span class="token constant">type</span> <span class="token attr-value"><span class="token punctuation">=</span> tcp</span>
<span class="token constant">local_ip</span> <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span>
<span class="token constant">local_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3389</span>
# 外网访问的端口
<span class="token constant">remote_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 6000</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>若设置多台机器，第二台机器可把<code>[RDP]</code>改为<code>[RDP1]</code>，把外网访问端口由<code>6000</code>改为<code>6001</code>。</p>
</li>
<li><p>开启远程桌面：“控制面板”——“系统”——“远程设置”——“允许远程连接至此电脑”。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200430155516.PNG" alt=""></p>
</li>
<li><p>cmd命令进入frp文件夹，运行如下命令：</p>
<pre><code>frpc.exe -c frpc.ini
</code></pre><p>运行成功会显示<code>start proxy success</code>，不要结束cmd命令窗口。</p>
</li>
</ul>
<h4 id="在用户机上"><a href="#在用户机上" class="headerlink" title="在用户机上"></a>在用户机上</h4><ul>
<li><p>设置打开远程桌面：“设置”——“远程桌面”——“开“</p>
<p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200430160135.PNG" alt=""></p>
</li>
<li><p>连接远程桌面</p>
<p>输入<code>公网IP:外网访问的端口</code>，输入被远程控制机器的系统用户名和密码。若远程操作多台机器，登录时需改变端口和用户名密码。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/捕获.PNG" alt=""></p>
<p>​    </p>
<h2 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h2><ul>
<li>日常操作速度：Windows远程桌面&gt;TeamViewer</li>
<li><p>传文件使用Teamviewer的file transfer更方便</p>
</li>
<li><p>Windows远程桌面打开Matlab报错：<code>MATLAB cannot be started through terminal services</code>，可修改license，见[6]。</p>
</li>
<li>对于CloudCompare软件，Windows远程桌面无法打开，可用teamviewer。</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>[1] <a href="https://blog.csdn.net/weixin_43210530/article/details/92837975" target="_blank" rel="external">WIN10远程控制（局域网）</a></p>
<p>[2] <a href="http://blog.sina.com.cn/s/blog_c54883470102vzwy.html" target="_blank" rel="external">怎样远程控制局域网的另一台电脑（远程桌面）windows10</a></p>
<p>[3] <a href="https://lzw.me/a/frp-windows-mstsc.html" target="_blank" rel="external">使用 FRP 实现在家远程桌面到公司内网进行远程办公</a></p>
<p>[4] <a href="https://zhuanlan.zhihu.com/p/55306067" target="_blank" rel="external">windows下基于frp的内网穿透部署</a></p>
<p>[5] <a href="https://www.atsurak.com/frp-windows-rdp/" target="_blank" rel="external">FRP内网穿透转发Windows远程桌面端口 详细教程</a></p>
<p>[6] <a href="https://www.zhihu.com/question/273691032" target="_blank" rel="external">如何远程登录Windows服务器或者主机，并使用主机上的Matlab？</a></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决xftp5：要继续使用此程序，您必须应用最新的更新或使用新版本]]></title>
      <url>/2019/04/24/%E4%B8%8D%E5%8D%87%E7%BA%A7%E8%A7%A3%E5%86%B3xftp5%EF%BC%9A%E8%A6%81%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8%E6%AD%A4%E7%A8%8B%E5%BA%8F%EF%BC%8C%E6%82%A8%E5%BF%85%E9%A1%BB%E5%BA%94%E7%94%A8%E6%9C%80%E6%96%B0%E7%9A%84%E6%9B%B4%E6%96%B0%E6%88%96%E4%BD%BF%E7%94%A8%E6%96%B0%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>不升级，解决xftp5：要继续使用此程序，您必须应用最新的更新或使用新版本。</p>
<ul>
<li><p>文本方式打开nslicense.dll</p>
</li>
<li><p>搜索16进制</p>
<p>7F0C81F98033E1010F8680<br>修改为</p>
<p>7F0C81F98033E101<strong>E98100</strong></p>
<p>或</p>
<p>7F0C81F98033E1010F8<strong>3</strong>80</p>
</li>
</ul>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://51.ruyo.net/11404.html" target="_blank" rel="external">Xshell无法启动：要继续使用此程序，您必须应用最新的更新或使用新版本</a></p>
]]></content>
      
        <categories>
            
            <category> warning&amp;error </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下通过sublime text批量替换多个文件]]></title>
      <url>/2019/04/24/Windows%E4%B8%8B%E9%80%9A%E8%BF%87sublime-text%E6%89%B9%E9%87%8F%E6%9B%BF%E6%8D%A2%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>Linux系统下可以用sed命令一键替换，Windows下的懒人模式，发现sublime text的新用途。</p>
<ul>
<li><p><strong>sublime text</strong>选择“文件”-“打开文件夹”</p>
<p><img src="http://cindy1024-blog.test.upcdn.net/blog/Snipaste_2019-04-24_21-01-37.png" alt=""></p>
</li>
<li><p>把含有要替换文本的文件放在一个文件夹内（可以包含多层级多个子文件夹），选择该文件夹。</p>
</li>
<li><p>在文件夹处右键“在文件夹中查找”，即可在多个文件中查找或替换文本。</p>
<blockquote>
<p> 左下角表示支持正则、大小写、全词匹配</p>
</blockquote>
<p><img src="http://cindy1024-blog.test.upcdn.net/blog/Snipaste_2019-04-24_21-38-21.png" alt=""></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用python为png图片加上背景色]]></title>
      <url>/2018/07/28/%E7%94%A8python%E4%B8%BApng%E5%9B%BE%E7%89%87%E5%8A%A0%E4%B8%8A%E8%83%8C%E6%99%AF%E8%89%B2/</url>
      <content type="html"><![CDATA[<h1 id="安装Pillow库"><a href="#安装Pillow库" class="headerlink" title="安装Pillow库"></a>安装Pillow库</h1><p>ImportError: No module named PIL 错误 的解决方法：</p>
<pre><code>pip install Pillow
</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image <span class="token keyword">as</span> Image
im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'cropped-1920-1080-744835.png'</span><span class="token punctuation">)</span> 
x<span class="token punctuation">,</span>y <span class="token operator">=</span> im<span class="token punctuation">.</span>size 
<span class="token keyword">try</span><span class="token punctuation">:</span> 
    p <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#创建背景色图像</span>
    p<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> im<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#将原图粘贴到背景图像上</span>
    p<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'out-cropped-1920-1080-744835.png'</span><span class="token punctuation">)</span> 
<span class="token keyword">except</span><span class="token punctuation">:</span> 
    <span class="token keyword">pass</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="PIL-Image-new-mode-size-color-0"><a href="#PIL-Image-new-mode-size-color-0" class="headerlink" title="PIL.Image.new(mode, size, color=0)"></a><strong>PIL.Image.new(<em>mode</em>, <em>size</em>, <em>color=0</em>)</strong></h2><p>Creates a new image with the given mode and size.</p>
<p><strong>mode</strong></p>
<ul>
<li><code>1</code> (1-bit pixels, black and white, stored with one pixel per byte)</li>
<li><code>L</code> (8-bit pixels, black and white)</li>
<li><code>P</code> (8-bit pixels, mapped to any other mode using a color palette)</li>
<li><code>RGB</code> (3x8-bit pixels, true color)</li>
<li><code>RGBA</code> (4x8-bit pixels, true color with transparency mask)</li>
<li><code>CMYK</code> (4x8-bit pixels, color separation)</li>
<li><p><code>YCbCr</code> (3x8-bit pixels, color video format)</p>
<ul>
<li>Note that this refers to the JPEG, and not the ITU-R BT.2020, standard</li>
</ul>
</li>
<li><code>LAB</code> (3x8-bit pixels, the L<em>a</em>b color space)</li>
<li><code>HSV</code> (3x8-bit pixels, Hue, Saturation, Value color space)</li>
<li><code>I</code> (32-bit signed integer pixels)</li>
<li><code>F</code> (32-bit floating point pixels)</li>
</ul>
<h2 id="Image-paste-im-box-None-mask-None"><a href="#Image-paste-im-box-None-mask-None" class="headerlink" title="Image.paste(im, box=None, mask=None)**"></a>Image.paste(<em>im</em>, <em>box=None</em>, <em>mask=None</em>)**</h2><p><strong>Parameters:</strong></p>
<ul>
<li><p><strong>im</strong> – Source image or pixel value (integer or tuple).</p>
</li>
<li><p><strong>box</strong> – An optional 4-tuple giving the region to paste into. If a 2-tuple is used instead, it’s treated as the upper left corner. If omitted or None, the source is pasted into the upper left corner.</p>
<p>If an image is given as the second argument and there is no third, the box defaults to (0, 0), and the second argument is interpreted as a mask image.</p>
<p>四元组：左上右下</p>
</li>
<li><p><strong>mask</strong> – An optional mask image.</p>
</li>
</ul>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="http://outofmemory.cn/code-snippet/7453/python-through-pil-png-tupian-fill-background-color" target="_blank" rel="external">python通过pil为png图片填充上背景颜色</a></p>
<p><a href="https://pillow.readthedocs.io/en/latest/reference/Image.html" target="_blank" rel="external">Image Module | Pillow</a></p>
]]></content>
      
        <categories>
            
            <category> 工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> png </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++如何判断整型运算溢出]]></title>
      <url>/2017/08/04/C-%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E6%95%B4%E5%9E%8B%E8%BF%90%E7%AE%97%E6%BA%A2%E5%87%BA/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>整数在计算机中主要由补码表示，分为无符号整数和有符号整数。若用i位表示整数，无符号整数的范围 $[0 , 2^i - 1]$ ，有符号整数的范围 $ [- 2 ^ {i-1} , 2^{i-1} - 1 ]$</p>
<blockquote>
<p><strong>阅读：</strong><a href="http://www.cnblogs.com/ccilery/p/6659928.html" target="_blank" rel="external">整数在计算机中的表示</a></p>
</blockquote>
<p>针对32位整型讨论</p>
<h1 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h1><h2 id="无符号整型"><a href="#无符号整型" class="headerlink" title="无符号整型"></a>无符号整型</h2><p>溢出舍去一位，相当于$ a+b - 2^i$ ，有 a+b &lt; a 或者 a+b &lt; b 。</p>
<ul>
<li>更长的临时变量保存</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">is_overflow_add_for_unsigned_int</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">&lt;</span> a <span class="token operator">||</span> a <span class="token operator">+</span> b <span class="token operator">&lt;</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>另一种</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">is_overflow_add_for_unsigned_int</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> UINT_MAX <span class="token operator">-</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="有符号整型"><a href="#有符号整型" class="headerlink" title="有符号整型"></a>有符号整型</h2><p>只有正溢出、负溢出两种情况。</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">is_overflow_add_for_signed_int</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">is_overflow_add_for_signed_int</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> INT_MAX <span class="token operator">-</span> a <span class="token operator">&lt;</span> b <span class="token operator">:</span> INT_MIN <span class="token operator">-</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">is_overflow_multiply_for_signed_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> mul<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">!</span>a<span class="token operator">||</span>mul<span class="token operator">/</span>a<span class="token operator">==</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">is_overflow_multiply_for_unsigned_int</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> UINT_MAX <span class="token operator">/</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">is_overflow_multiply_for_signed_int</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>
    a <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> INT_MAX <span class="token operator">/</span> a <span class="token operator">&lt;</span> b <span class="token operator">:</span> INT_MIN <span class="token operator">/</span> a <span class="token operator">></span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="赋值判断溢出"><a href="#赋值判断溢出" class="headerlink" title="赋值判断溢出"></a>赋值判断溢出</h1><p>先用大一倍位长的临时变量保存，然后再看看截断后跟原值是不是一样。</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">long</span> y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span>  res <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://www.cnblogs.com/evilkant/p/6028074.html" target="_blank" rel="external">如何判断整型算术运算是否溢出</a></li>
<li><a href="http://bbs.chinaunix.net/thread-1031668-1-1.html" target="_blank" rel="external">两个int变量相乘如何判断溢出？</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 溢出 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客常用]]></title>
      <url>/2017/07/01/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E7%BC%96%E8%BE%91LaTex%E5%85%AC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>集合多文，方便查看<a id="more"></a></p>
<h1 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h1><figcaption>s</code>    启动服务器<br><code>hexo g</code>    生成静态文件<br><code>hexo d</code>    部署<br><code>hexo new &quot;文章名&quot;</code>    新建文章<br><code>hexo clean</code>    清除缓存文件和生成的静态文件</p></figcaption><pre class="line-numbers language-hexo"><h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"><code class="language-hexo"><h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><blockquote>
<p><strong>粗体</strong></p>
<p><em>斜体</em></p>
<p><del>删除</del></p>
<p>分割线</p>
<hr>
</blockquote>
<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><blockquote>
<p># 一级标题<br>## 二级标题<br>……<br>###### 六级标题</p>
</blockquote>
<h3 id="列表、表格"><a href="#列表、表格" class="headerlink" title="列表、表格"></a>列表、表格</h3><blockquote>
<ul>
<li>无序</li>
<li>列表</li>
</ul>
<ol>
<li>有序</li>
<li>列表</li>
</ol>
<table>
<thead>
<tr>
<th>Tables （靠左）</th>
<th style="text-align:center">Are （居中）</th>
<th style="text-align:right">Cool （靠右）</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="引用、代码"><a href="#引用、代码" class="headerlink" title="引用、代码"></a>引用、代码</h3><blockquote>
<p>引用 </p>
<p> <code>行内标记<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code>  多行代码
</code></pre></blockquote>
<h3 id="图片、链接"><a href="#图片、链接" class="headerlink" title="图片、链接"></a>图片、链接</h3><blockquote>
<p><img src="/2017/07/01/hexo博客中编辑LaTex公式/url" alt="不显图片text"></p>
<p><a href="url">text</a></p>
</blockquote>
<h1 id="LaTex-数学公式"><a href="#LaTex-数学公式" class="headerlink" title="LaTex 数学公式"></a>LaTex 数学公式</h1><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.mathjax.org/mathjax/latest/MathJax.js?config<span class="token punctuation">=</span>default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><ul>
<li>行内公式 <code>$y=x$</code></li>
<li>整行公式 <code>$$y=x$$</code></li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li>上标 <code>x^2</code>  <code>x^{31}</code> （注：{}用于分组）</li>
<li>下标 <code>x_2</code></li>
</ul>
<h3 id="markdown与hexo自带的marked产生的语法冲突"><a href="#markdown与hexo自带的marked产生的语法冲突" class="headerlink" title="markdown与hexo自带的marked产生的语法冲突"></a>markdown与hexo自带的marked产生的语法冲突</h3><p>手动加转义符\</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">markdown</th>
<th style="text-align:center">hexo-render-marked</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">_</td>
<td style="text-align:center">两个<code>\_</code>之间，表示<em>强调</em></td>
<td style="text-align:center">下标</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">两个<code>\*</code>之间，表示斜体</td>
<td style="text-align:center">乘号</td>
</tr>
</tbody>
</table>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h3 id="与-sublime-text-插件-Markdown-Preview配合使用"><a href="#与-sublime-text-插件-Markdown-Preview配合使用" class="headerlink" title="与 sublime text 插件 Markdown Preview配合使用"></a>与 sublime text 插件 Markdown Preview配合使用</h3><p>自动间隔刷新，文章中插入如下：</p>
<pre><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0.1&quot;&gt;
</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">hexo指令</a><br><a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">Markdown——入门指南</a><br><a href="http://www.jianshu.com/p/0b257de21eb5" target="_blank" rel="external">Markdown进阶语法整理</a><br><a href="https://segmentfault.com/a/1190000007261752" target="_blank" rel="external">Hexo下mathjax的转义问题</a></p>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[决策树之ID3]]></title>
      <url>/2017/06/08/%E5%86%B3%E7%AD%96%E6%A0%91%E4%B9%8BID3/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>决策树</strong>是一棵多叉树，每个非叶子节点用一个输入特征标记，每个分支用该特征的一个可能值标记，每个叶节点用类别的一个元素标记。</p>
<p><strong>决策树算法</strong>，在训练阶段，用样本数据构造一棵决策树，作为分类器。学习的结果是一个决策树。</p>
<h1 id="两个问题"><a href="#两个问题" class="headerlink" title="两个问题"></a>两个问题</h1><h2 id="什么样的特征分类能力最好？"><a href="#什么样的特征分类能力最好？" class="headerlink" title="什么样的特征分类能力最好？"></a>什么样的特征分类能力最好？</h2><p>采用熵，作为系统无序化程度的度量。<br>信息熵：信源不确定度。<br>$ H \left (U \right) = E \left [ - \log p_{i} \right ] = - \sum_{i=1}^{n} p_{i} \log p_{i} $<br><strong>值得注意的是</strong>，信息集合的体量越大，熵也越大。所以用集合中样本数量的占比来为集合加权，引入信息增益。</p>
<p>信息增益：特征给系统带来的信息量。熵减 = 信息增<br>$ IG \left ( S , T \right) = E \left( S \right ) - \sum_{i=0}^{N} \frac{D_{i}}{D_{S}} E \left( S_{i} \right) $</p>
<p><strong>延伸</strong></p>
<blockquote>
<p><strong>互信息</strong> ：变量间相互依赖性的量度<br>知道其中一个变量提供的另一个的信息量（即不确定度的减少量）<br><img src="http://b.hiphotos.baidu.com/baike/w%3D268%3Bg%3D0/sign=a98b469b259759ee4a5067cd8ac0242b/94cad1c8a786c917de4f70afca3d70cf3ac757d3.jpg" alt=""><br>知道 X 后 Y 的不确定度的量的减少程度    =    Y的不确定度    -    在 X 已知之后 Y 的剩余不确定度的量</p>
</blockquote>
<h2 id="怎样的结点是叶子结点？"><a href="#怎样的结点是叶子结点？" class="headerlink" title="怎样的结点是叶子结点？"></a>怎样的结点是叶子结点？</h2><table>
<thead>
<tr>
<th style="text-align:center">情况</th>
<th style="text-align:center">判断条件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">纯结点</td>
<td style="text-align:center">$ \max IG = 0 $</td>
</tr>
<tr>
<td style="text-align:center">非纯结点，而且当前所有的特征都测试完</td>
<td style="text-align:center">$ \max IG = 0 $</td>
</tr>
<tr>
<td style="text-align:center">空结点</td>
<td style="text-align:center">样本数 = 0</td>
</tr>
</tbody>
</table>
<ul>
<li><p>对于纯叶子结点，若再用任意特征划分：<br>对于纯结点集合S，有两种情况，一是样本全属于某类别$ p_{i} = 1 $，则$ \log_{2} p_{i} = 0 $；一是$ p_{i} = 0 $。此时再用任一特征把S划分为k个子集合$ S_{1},S_{2},…,S_{k} $，全是纯结点，信息熵为零，故$ IG \left ( S , T \right) = E \left( S \right ) - \sum_{i=0}^{k} \frac{D_{i}}{D_{S}} E \left( S_{i} \right)  = 0 $</p>
</li>
<li><p>对于非纯叶结点，所有特征测试完，再选任一特征进行划分：<br>相当于重复测试特征，得到的子集合 = 父集合。</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 模式识别 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 有监督学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人工神经网络之BP算法]]></title>
      <url>/2017/06/06/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B9%8BBP%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><p><strong>神经网络</strong>，是一种应用类似于大脑神经突触连接结构进行信息处理的数学模型。一个神经元包含一个细胞体、一些树突和一根很长的轴突。</p>
<h3 id="如何模拟大脑"><a href="#如何模拟大脑" class="headerlink" title="如何模拟大脑"></a>如何模拟大脑</h3><p>神经元之间有权重的链接将信号从一个神经元传递到另一个神经元。每个神经元连接到几个输入信号，但不会产生多于一个输出信号。（输入层不算。一层中间层+输出层=两层神经网络）</p>
<p>人工神经网络ANN，是一个非线性有向无环图。神经元的信号强弱——<strong>分支不分流</strong>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">生物</th>
<th style="text-align:center">人工</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">细胞体</td>
<td style="text-align:center">神经元</td>
</tr>
<tr>
<td style="text-align:center">树突</td>
<td style="text-align:center">输入</td>
</tr>
<tr>
<td style="text-align:center">轴突</td>
<td style="text-align:center">输出</td>
</tr>
<tr>
<td style="text-align:center">突触</td>
<td style="text-align:center">权重</td>
</tr>
</tbody>
</table>
<center><br><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b10000_10000&amp;sec=1496760396&amp;di=4720632603eed29eaf29c64b3717af5a&amp;src=http://image.lxway.com/upload/6/09/6095c5adb1901745c9fb46c23bbf6bfb_thumb.jpg" alt="生物神经网络"><br><br><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1764222980,1070366798&amp;fm=26&amp;gp=0.jpg" alt="人工神经网络"><br></center>


<h3 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h3><p>神经元通过链接相连，每个链接都有权重。学习的是<strong>权重</strong>。</p>
<h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><h2 id="萌芽期"><a href="#萌芽期" class="headerlink" title="萌芽期"></a>萌芽期</h2><ul>
<li>MP模型<ul>
<li>阈值加权和</li>
<li>$ 一个神经元 = \sum_{i=0}^{N} 强度 * 权重 - 抑制能力 $</li>
</ul>
</li>
</ul>
<h2 id="第一次高潮"><a href="#第一次高潮" class="headerlink" title="第一次高潮"></a>第一次高潮</h2><ul>
<li>Perceptron 单级感知器<ul>
<li>一层的神经网络（没有中间层，只能解决线性问题）</li>
</ul>
</li>
</ul>
<h2 id="第二次高潮"><a href="#第二次高潮" class="headerlink" title="第二次高潮"></a>第二次高潮</h2><ul>
<li>Hopfield网络</li>
<li>Boltzmann机</li>
<li>BP算法</li>
</ul>
<h1 id="BP算法"><a href="#BP算法" class="headerlink" title="BP算法"></a>BP算法</h1>]]></content>
      
        <categories>
            
            <category> 模式识别 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 有监督学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这些电脑小工具]]></title>
      <url>/2017/03/07/%E8%BF%99%E4%BA%9B%E7%94%B5%E8%84%91%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<ul>
<li>写于2017-03-07</li>
<li>2019-04-24更新</li>
</ul>
<blockquote>
<p>这是一篇正经的安利小文，关于电脑上的一些小工具，特别分享给二狗和二二同学~</p>
</blockquote>
<p>在电脑上各种软件或网站，总会遇到挺多的限制，这时候喜欢找些奇奇怪怪的东西，帮自己提高提高效率，而且，发现新事物的过程也是特别愉快，每次都惊叹于人民群众的劳动智慧。</p>
<a id="more"></a>
<p>原始人制作了石锤、石斧等，技能满点，想方设法合作把许多有威胁的大型动物团灭，过上喝酒吃肉的快意生活。当然，只会专注于收集工具而不用，也就是个摆设罢。</p>
<p>工具的来源或教程，大多来自度娘、知乎、吾爱论坛，此处不表，自行百度咯。</p>
<h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><h2 id="远程-amp-命令行"><a href="#远程-amp-命令行" class="headerlink" title="远程&amp;命令行"></a>远程&amp;命令行</h2><h3 id="putty"><a href="#putty" class="headerlink" title="putty"></a>putty</h3><p>连接服务器</p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><h3 id="teamviewer"><a href="#teamviewer" class="headerlink" title="teamviewer"></a>teamviewer</h3><p>可以ipad控制电脑</p>
<h3 id="Cmder"><a href="#Cmder" class="headerlink" title="Cmder"></a>Cmder</h3><p>好用的命令行</p>
<h3 id="xftp"><a href="#xftp" class="headerlink" title="xftp"></a>xftp</h3><p>ftp</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="PDF-Viewer"><a href="#PDF-Viewer" class="headerlink" title="PDF-Viewer"></a>PDF-Viewer</h3><p>pdf阅读器，轻量，支持自定义快捷键添加笔记。<code>NICE</code></p>
<h3 id="Xmind"><a href="#Xmind" class="headerlink" title="Xmind"></a>Xmind</h3><p>思维导图</p>
<h3 id="Citavi"><a href="#Citavi" class="headerlink" title="Citavi"></a>Citavi</h3><p>论文管理</p>
<h3 id="Visio"><a href="#Visio" class="headerlink" title="Visio"></a>Visio</h3><p>画图</p>
<h3 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h3><p>资料同步</p>
<h3 id="OneNote"><a href="#OneNote" class="headerlink" title="OneNote"></a>OneNote</h3><p>——笔记整理<br><br>以前用印象笔记，奈何断断续续出问题，登录失败，弃之。如果电脑装了Office，已经顺带装好了OneNote桌面版。</p>
<ul>
<li>按Tab键自动生成表格<br><img src="http://cindy1024-blog.test.upcdn.net/20170307/164231847.png" alt="mark"></li>
<li>可自定义标记+配合快捷键<br><img src="http://cindy1024-blog.test.upcdn.net/20170307/164448443.png" alt="mark"></li>
<li>自由移动一大块<br><img src="http://cindy1024-blog.test.upcdn.net/20170307/165018641.png" alt="mark"></li>
<li>绘图功能，配合可触屏的笔记本更佳<br><img src="http://cindy1024-blog.test.upcdn.net/20170307/165329315.png" alt="mark"></li>
<li>可以找插件，如代码高亮<br><img src="http://cindy1024-blog.test.upcdn.net/20170307/170006245.png" alt="mark"></li>
<li>复制文字，粘贴转图片</li>
<li>插入文件、音频等……</li>
<li>笔记本分区无限（笔记本里的笔记本里的……笔记）<br>等等~<br><br></li>
</ul>
<p>##英语</p>
<h3 id="Aboboo"><a href="#Aboboo" class="headerlink" title="Aboboo"></a>Aboboo</h3><p>可练习英语听写、跟读。</p>
<h3 id="MDict"><a href="#MDict" class="headerlink" title="MDict"></a>MDict</h3><p>词典，可自行添加各种词典。</p>
<h3 id="Anki"><a href="#Anki" class="headerlink" title="Anki"></a>Anki</h3><p>——单词记忆工具，自制词库（不只限制于单词）。<br><br>有正反卡片，填空等格式<br><img src="http://cindy1024-blog.test.upcdn.net/20170307/215945552.png" alt="mark"></p>
<h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>markdown编辑器</p>
<h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><p>图床工具</p>
<h2 id="PotPlayer-amp-VLC"><a href="#PotPlayer-amp-VLC" class="headerlink" title="PotPlayer &amp; VLC"></a>PotPlayer &amp; VLC</h2><p>——播放器<br><br>支持倍速播放，看视频课加快语速</p>
<h2 id="QQ影音"><a href="#QQ影音" class="headerlink" title="QQ影音"></a>QQ影音</h2><p>Mp4转Mp3格式</p>
<h1 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h1><h2 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h2><h3 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h3><p>查找文件，非常快。</p>
<h3 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h3><p>截图，且截图可编辑加文字等。</p>
<h3 id="DeskPins"><a href="#DeskPins" class="headerlink" title="DeskPins"></a>DeskPins</h3><p>窗口置顶。配合chrome插件<code>separate window</code>可以边看小窗看视频边干活。</p>
<h3 id="Ditto"><a href="#Ditto" class="headerlink" title="Ditto"></a>Ditto</h3><p>复制粘贴工具，支持多次复制，选择性粘贴。</p>
<h3 id="SnapTimer"><a href="#SnapTimer" class="headerlink" title="SnapTimer"></a>SnapTimer</h3><p>倒计时</p>
<h3 id="Sticky-Notes"><a href="#Sticky-Notes" class="headerlink" title="Sticky Notes"></a>Sticky Notes</h3><p>Win10自带便签</p>
<h3 id="Rocket-Dock"><a href="#Rocket-Dock" class="headerlink" title="Rocket Dock"></a>Rocket Dock</h3><p>模仿linux底部菜单</p>
<h2 id="系统监控"><a href="#系统监控" class="headerlink" title="系统监控"></a>系统监控</h2><h3 id="CCleaner"><a href="#CCleaner" class="headerlink" title="CCleaner"></a>CCleaner</h3><p>电脑清洁</p>
<h3 id="Speccy64"><a href="#Speccy64" class="headerlink" title="Speccy64"></a>Speccy64</h3><p>硬件监控</p>
<h2 id="视频下载"><a href="#视频下载" class="headerlink" title="视频下载"></a>视频下载</h2><ul>
<li>b站 ——在网址<code>bilibili</code>前面加i或后面加jj，可跳转</li>
<li>爱课程网 ——爱课程课程助手地瓜专版</li>
<li>网易公开课 ——网易云课堂课程下载器v2.2<br>配合PotPlayer，棒(●’◡’●)<br><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2></li>
<li><del>集合下载工具 ——音乐间谍V3.4 <br></del><img src="http://cindy1024-blog.test.upcdn.net/20170307/171641729.png" alt="mark"><br></li>
<li>配合网易云音乐，上传到我的音乐云盘，电脑手机同步听。<br><img src="http://cindy1024-blog.test.upcdn.net/20170307/171929232.png" alt="mark"><br></li>
<li><strong>Spotify</strong>： 调教一段时间后，推荐很合口味。适合在线听歌，免费版只能随机打乱听。有安卓端。</li>
</ul>
<h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><h2 id="Chrome插件"><a href="#Chrome插件" class="headerlink" title="Chrome插件"></a>Chrome插件</h2><h3 id="Momemtun"><a href="#Momemtun" class="headerlink" title="Momemtun"></a>Momemtun</h3><p>——漂亮的标签页<br><img src="http://cindy1024-blog.test.upcdn.net/20170307/172344038.png" alt="mark"></p>
<h3 id="LastPass"><a href="#LastPass" class="headerlink" title="LastPass"></a>LastPass</h3><p>——管理密码</p>
<h3 id="Clip-to-OneNote"><a href="#Clip-to-OneNote" class="headerlink" title="Clip to OneNote"></a>Clip to OneNote</h3><p>——配合OneNote的剪切工具</p>
<h3 id="OneTab"><a href="#OneTab" class="headerlink" title="OneTab"></a>OneTab</h3><p>——把暂时不用的标签页变成一个，节省内存。<br><br>对于喜欢一次打开十几个标签页的我，福音！！</p>
<h3 id="一键管理所有拓展"><a href="#一键管理所有拓展" class="headerlink" title="一键管理所有拓展"></a>一键管理所有拓展</h3><p>——快速禁用插件</p>
<h3 id="EyeDropper"><a href="#EyeDropper" class="headerlink" title="EyeDropper"></a>EyeDropper</h3><p>——网页取色工具<br><br>强迫症用ps时的福音</p>
<h3 id="Violent-Monkey"><a href="#Violent-Monkey" class="headerlink" title="Violent Monkey"></a>Violent Monkey</h3><p>——脚本管理<br></p>
<p><del>配合某脚本+迅雷破解版，用迅雷下载百度云的大文件，具体搜知乎<br></del><img src="http://cindy1024-blog.test.upcdn.net/20170307/173136516.png" alt="mark"></p>
<h3 id="Diigo"><a href="#Diigo" class="headerlink" title="Diigo"></a>Diigo</h3><p>网页摘录</p>
<h2 id="Chrome应用"><a href="#Chrome应用" class="headerlink" title="Chrome应用"></a>Chrome应用</h2><h3 id="Gliffy-Diagrams"><a href="#Gliffy-Diagrams" class="headerlink" title="Gliffy Diagrams"></a>Gliffy Diagrams</h3><p>——画流程图等</p>
<h3 id="Halo-Word"><a href="#Halo-Word" class="headerlink" title="Halo Word"></a>Halo Word</h3><p>——词典，按Ctrl查词</p>
<h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><p>发送http请求</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[About me]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p><br>CS在读，爱好羽毛球</p>
<p><br></p>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><ul>
<li>2020-04-30：更换github图床+jsdelivr加速 ；源码同步托管coding和github，智能dns设置境内境外不同访问线路，cloudflare加速；valine评论通知。</li>
<li>2019-03-23：更换域名，更新不蒜子统计，<del>更换又拍云图床</del>，添加文章底部<a href="https://juejin.im/post/5c7dd8675188251b6406e7b5" target="_blank" rel="external">版权样式</a>。</li>
<li>2018-07-27：启用Next主题，自定义样式克隆自<a href="qianjiye.de">CHANGE・業・德</a>，表示感谢</li>
<li>2017-07-24：<del>启用主题Material</del></li>
<li>2017-02-01：建博</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Master-Mind Hints]]></title>
      <url>/questions/Master-Mind-Hints.html</url>
      <content type="html"><![CDATA[<p>猜数字游戏的提示。<a id="more"></a></p>
<h1 id="题目-340"><a href="#题目-340" class="headerlink" title="题目 340"></a><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=276" target="_blank" rel="external">题目 340</a></h1><p>猜数字游戏，给定用户序列<code>a secret code</code>和答案序列<code>guesses</code>，统计有多少数字位置正确（A）<code>a strong match</code>，多少数字在两个序列都出现过但位置不对（B）<code>a weak match</code>。</p>
<p>输入第一行为序列长度n，第二行为答案序列，接下来是猜测序列。猜测序列为全零，该组数据结束；n=0时输入结束。（数字1~9）</p>
<p>s[i]==p[j] 且 i==j 时, a strong match<br>s[i]==p[j] 且 i!=j 时, a weak match</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p><img src="http://cindy1024-blog.test.upcdn.net/20170816/172153549.png" alt="mark"></p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>注意输入格式，序列前面有4个空格 orz…</p>
<p><img src="http://cindy1024-blog.test.upcdn.net/20170816/172219874.png" alt="mark"></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>起初思维被限定，按照count流程一个个计算，要考虑很多情况，非常麻烦。</p>
<p>参考刘汝佳思路：直接统计可得A。为了求B，对每个数字，统计在二者出现的次数c1和c2，min(c1, c2)是该数字对B的贡献。最后的最后减去A的部分。</p>
<p>用数组a、b分别统计每个数字在两序列出现次数。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token keyword">int</span> game <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> <span class="token operator">*</span>num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x<span class="token punctuation">;</span>
            cin <span class="token operator">>></span> x<span class="token punctuation">;</span>
            num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
            a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Game "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>game <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> zero<span class="token punctuation">,</span>correct<span class="token punctuation">,</span> dislocate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输入0的个数、A个数、B个数</span>
            zero <span class="token operator">=</span> correct <span class="token operator">=</span> dislocate <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> x<span class="token punctuation">;</span>
                cin <span class="token operator">>></span> x<span class="token punctuation">;</span>
                b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> zero<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> correct<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>zero <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dislocate <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
            dislocate <span class="token operator">-</span><span class="token operator">=</span> correct<span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">'('</span> <span class="token operator">&lt;&lt;</span> correct <span class="token operator">&lt;&lt;</span> <span class="token string">','</span> <span class="token operator">&lt;&lt;</span> dislocate <span class="token operator">&lt;&lt;</span> <span class="token string">')'</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Reverse Integer]]></title>
      <url>/questions/Reverse-Integer.html</url>
      <content type="html"><![CDATA[<p>翻转32位有符号整型数字，注意溢出。<a id="more"></a></p>
<h1 id="题目-7"><a href="#题目-7" class="headerlink" title="题目 7"></a>题目 7</h1><p>Reverse digits of an integer.</p>
<p>Example1: x = 123, return 321<br>Example2: x = -123, return -321</p>
<p><strong>Note:</strong> The input is assumed to be a 32-bit signed integer. Your function should return 0 when the reversed integer overflows.</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul>
<li>32位有符号整型范围：$[-2^{31} , 2^{31}-1]$</li>
<li>溢出 <code>int y = a*b;</code> 在得出a*b的结果时已经溢出（在赋值之前）</li>
</ul>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> max <span class="token operator">||</span> x <span class="token operator">&lt;</span> <span class="token operator">-</span>max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">double</span> tmp <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        y <span class="token operator">=</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> max <span class="token operator">||</span> tmp <span class="token operator">&lt;</span> <span class="token operator">-</span>max <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span>tmp<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断溢出</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>主体过程一样，区别在于<strong>对溢出的处理</strong>：</p>
<ul>
<li>用long保存中间转换数</li>
<li>long赋值给int，若赋值后两边不等，溢出。</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> <span class="token keyword">long</span> numReversed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//长整型64位</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span> num <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            numReversed <span class="token operator">=</span> numReversed <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            num <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> numReversed<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> numReversed<span class="token punctuation">)</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="something"><a href="#something" class="headerlink" title="something"></a>something</h1><h4 id="数的表示"><a href="#数的表示" class="headerlink" title="数的表示"></a>数的表示</h4><ul>
<li>科学计数法 <code>2E31</code> =&gt; $2* (10^{31})$</li>
<li>次方的表示 <code>pow(2,31)</code> =&gt; $2^{31}$  （注：头文件<code>&lt;math.h&gt;</code>）</li>
</ul>
<h4 id="如何判断溢出"><a href="#如何判断溢出" class="headerlink" title="如何判断溢出"></a><a href="/2017/08/04/C-如何判断整型运算溢出/">如何判断溢出</a></h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[写啊！少年]]></title>
      <url>/mind/index.html</url>
      <content type="html"><![CDATA[<ul>
<li><a href="./翻完我的简讯我的信-顺便翻翻我的心情.html">句</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Palindrome Number]]></title>
      <url>/questions/Palindrome-Number.html</url>
      <content type="html"><![CDATA[<p>判断回文数。<a id="more"></a></p>
<h1 id="题目-9"><a href="#题目-9" class="headerlink" title="题目 9"></a>题目 9</h1><p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<p>click to show spoilers.</p>
<hr>
<p><strong>Some hints:</strong><br>Could negative integers be palindromes? (ie, -1)</p>
<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>
<p>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p>
<p>There is a more generic way of solving this problem.</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>负号不对称，负数不是回文数。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>用了额外的栈和队列空间。</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>
        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> tmp <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>Only reversing till half and then compare. <a href="http://wuxinju.top/2017/08/03/Reverse-Integer/" target="_blank" rel="external">007-Reverse-Integer</a></p>
<p>空间复杂度O(1)，与问题规模n无关。</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span> <span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//10的倍数必定不是回文数</span>
        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">></span>sum<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            sum <span class="token operator">=</span> sum<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
            x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">==</span>sum<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>x<span class="token operator">==</span>sum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//偶数位、奇数位</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[String to Integer]]></title>
      <url>/questions/String-to-Integer.html</url>
      <content type="html"><![CDATA[<p>实现atoi函数。<a id="more"></a></p>
<h1 id="题目-8"><a href="#题目-8" class="headerlink" title="题目 8"></a>题目 8</h1><p>Implement atoi to convert a string to an integer.</p>
<p><strong>Hint:</strong> Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>
<p><strong>Notes:</strong> It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote>
<p><strong>atoi (ascii to integer)</strong>把字符串转换成整型数。跳过前面的空白字符（例如空格，tab缩进等。可以通过isspace( )函数来检测），直到遇上数字或正负符号才开始做转换，而在遇到非数字或字符串结束时(‘\0’)才结束转换，并将结果返回。如果 nptr不能转换成 int 或者 nptr为空字符串，那么将返回 0。</p>
</blockquote>
<p>题目说明包含所有输入情况，需要考虑：</p>
<ul>
<li>开头过滤空白字符<ul>
<li>isspace( )函数</li>
</ul>
</li>
<li>符号位</li>
<li>顺序 ${(blank character)}^{*}  {(+|-)}^{*} {(num)}^{*}$</li>
<li>溢出</li>
<li>无效输入<ul>
<li>连着2个符号位及以上</li>
<li>“+ 123”</li>
</ul>
</li>
</ul>
<p>奇葩输入：</p>
<ul>
<li>“     001”</li>
<li>“18446744073709551617”</li>
</ul>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>可改进：</p>
<ul>
<li>过滤符号位麻烦，类似’+-‘情况直接放最后考虑。</li>
<li>判断溢出</li>
<li>最终处理符号位 *</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//记录符号位</span>
        <span class="token keyword">int</span> i<span class="token punctuation">,</span>start<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> overflow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//溢出标志</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">isspace</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//过滤空白符</span>
        start <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//过滤'+'、'-'</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> flag<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> flag<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">//num = num * 10 + str[i] - 48;</span>

                <span class="token keyword">int</span> tmp <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">!=</span> num<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//乘法溢出</span>
                    overflow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

                num <span class="token operator">=</span> tmp <span class="token operator">+</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>overflow <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    overflow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//加法溢出</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> start<span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//没有'+'、'-'符号出现</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>overflow<span class="token punctuation">)</span> <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> num<span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>overflow<span class="token punctuation">)</span> <span class="token keyword">return</span> INT_MIN<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> num<span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>用<code>i++</code>连接三个过程</li>
<li>对溢出的判断<ul>
<li><code>INT_MIN</code> -2147483648 被误判为overflow，但结果恰好正确。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> base <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sign <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//先赋值再++</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//判断溢出</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>base <span class="token operator">></span>  INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>base <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">></span> INT_MAX <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> INT_MIN<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        base  <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> base <span class="token operator">+</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> base <span class="token operator">*</span> sign<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="something"><a href="#something" class="headerlink" title="something"></a>something</h1><ul>
<li>INT_MAX等范围值在<code>&lt;limits.h&gt;</code>文件中。</li>
<li><a href="/2017/08/04/C-如何判断整型运算溢出/">判断溢出</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ZigZag Conversion]]></title>
      <url>/questions/ZigZag-Conversion.html</url>
      <content type="html"><![CDATA[<p>把字符串转换成之字形，重新读取字串。<a id="more"></a></p>
<h1 id="题目-6"><a href="#题目-6" class="headerlink" title="题目 6"></a>题目 6</h1><p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<pre><code>P   A   H   N
A P L S I I G
Y   I   R
</code></pre><p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code><br>Write the code that will take a string and make this conversion given a number of rows:</p>
<pre><code>string convert(string text, int nRows);
</code></pre><p><code>convert(&quot;PAYPALISHIRING&quot;, 3)</code> should return <code>&quot;PAHNAPLSIIGYIR&quot;</code>.</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>找规律题</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>每行的首字母之后都依次分析第一个字母<code>(nRows-1-i)*2</code>、第二个字母<code>(nRows-1)*2</code>，繁琐。</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">    string <span class="token function">convert</span><span class="token punctuation">(</span>string text<span class="token punctuation">,</span> <span class="token keyword">int</span> nRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> l_space<span class="token punctuation">,</span> r_space<span class="token punctuation">,</span> l_letter<span class="token punctuation">,</span> r_letter<span class="token punctuation">;</span>
        <span class="token keyword">int</span> t<span class="token punctuation">;</span>
        string res<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> text<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nRows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            l_letter <span class="token operator">=</span> <span class="token punctuation">(</span>nRows <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
            r_letter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>
            t <span class="token operator">=</span> i<span class="token punctuation">;</span>

            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> l_letter <span class="token operator">&lt;</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>l_letter <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>t <span class="token operator">+</span> l_letter<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token punctuation">(</span>nRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">>=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//若第二个字母超出范围，本行已经到末尾</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>r_letter <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span>t <span class="token operator">+</span> l_letter <span class="token operator">+</span> r_letter<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token punctuation">(</span>nRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新某行的当前标记</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//只有一个字符</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>间隔列固定 <code>2*numRows-2</code>，（除了首行和末尾行）中间字母规律<code>2*(numRows-1-i)</code>。</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        string <span class="token function">convert</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>numRows<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>
            string rel<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> l<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> add<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>numRows<span class="token number">-2</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numRows<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>l<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span>add<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//把步长增加放到for循环中</span>
                    rel<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//固定列字母</span>
                    <span class="token keyword">int</span> flag<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>numRows<span class="token number">-1</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span>numRows<span class="token number">-1</span><span class="token operator">&amp;&amp;</span>flag<span class="token operator">&lt;</span>l<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//非首尾行，且 flag&lt;l</span>
                        rel<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//中间字母</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> rel<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Container With Most Water]]></title>
      <url>/questions/container-with-most-water.html</url>
      <content type="html"><![CDATA[<p>装最多水的容器。<a id="more"></a></p>
<h1 id="题目-11"><a href="#题目-11" class="headerlink" title="题目 11"></a>题目 11</h1><p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<p><strong>Note:</strong> You may not slant the container and n is at least 2.</p>
<p>给定 n 个非负整数 a1, a2, …, an, 每个数代表了坐标中的一个点 (i, ai)。画 n 条垂直线，使得 i 垂直线的两个端点分别为(i, ai)和(i, 0)。找到两条线，使得其与 x 轴共同构成一个容器，以容纳最多水。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>一开始看到题目有些发懵，反复读了几遍，其实就是 <strong>木桶效应+最大长方形</strong> 问题的结合。两条直线中，较短的一条成为短板。用两个指针分别从左右开始往中间走，希望继续寻找比短板更高的直线。过程比较简单。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> maxArea <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> area <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                area <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token operator">*</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//计算面积</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//左边指针往中间走</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                area <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token operator">*</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计算面积</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//右边指针往中间走</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">></span> maxArea<span class="token punctuation">)</span> maxArea <span class="token operator">=</span> area<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> maxArea<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[翻完我的简讯我的信 顺便翻翻我的心情]]></title>
      <url>/mind/%E7%BF%BB%E5%AE%8C%E6%88%91%E7%9A%84%E7%AE%80%E8%AE%AF%E6%88%91%E7%9A%84%E4%BF%A1-%E9%A1%BA%E4%BE%BF%E7%BF%BB%E7%BF%BB%E6%88%91%E7%9A%84%E5%BF%83%E6%83%85.html</url>
      <content type="html"><![CDATA[<ul>
<li>2017.11.09</li>
<li>天气 晴</li>
</ul>
<p>从网易云转战虾米，开始拾起很久没听的林宥嘉。熟悉的感觉，神游live的每一首歌似乎都那么熟悉。在学校广播听见yoga，开心得可以蹦起来，享受。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[奋起啊！少年]]></title>
      <url>/questions/index.html</url>
      <content type="html"><![CDATA[<p><img src="http://cindy1024-blog.test.upcdn.net/20170811/170142258.PNG" alt=""></p>
<h1 id="题库"><a href="#题库" class="headerlink" title="题库"></a>题库</h1><h2 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h2><ul>
<li><a href="./ZigZag-Conversion.html">006  ZigZag Conversion</a>  把字符串转换成之字形，重新读取字串。</li>
<li><a href="./Reverse-Integer.html">007  Reverse Integer</a>    翻转32位有符号整型数字，注意溢出。</li>
<li><a href="./String-to-Integer.html">008  String to Integer</a>  实现atoi函数。</li>
<li><a href="./Palindrome-Number.html">009  Palindrome Number</a>  判断回文数。</li>
<li><a href="./container-with-most-water.html">011  Container With Most Water</a> 木桶效应+最大长方形。</li>
<li><a href="./integer-to-roman.html">012/013  Integer to Roman / Roman to Integer</a> 整型、罗马数字互转。</li>
<li><a href="./longest-common-prefix.html">014 Longest Common Prefix</a> 最长共同前缀。</li>
<li><a href="./leetcode/合并两个有序链表.html">021 合并两个有序链表</a></li>
<li><a href="./leetcode/删除排序链表中的重复元素.html">083 删除排序链表中的重复元素</a></li>
<li><a href="./leetcode/环形链表.html">141/142 环形链表</a></li>
<li><a href="./leetcode/相交链表.html">160 相交链表</a></li>
<li><a href="./leetcode/移除链表元素.html">203 移除链表元素</a></li>
<li><a href="./leetcode/验证二叉搜索树.html">98 验证二叉搜索树</a></li>
<li><a href="./leetcode/最低票价.html">983 最低票价</a></li>
<li><a href="./leetcode/另一个树的子树.html">572 另一个树的子树</a></li>
<li><a href="./leetcode/最大正方形-统计全为1的正方形子矩阵.html">221/1277 最大正方形/统计全为1的正方形子矩阵</a></li>
<li><a href="./leetcode/斐波那契数-爬楼梯.html">509/70 斐波那契数/爬楼梯</a></li>
</ul>
<h2 id="UVa"><a href="#UVa" class="headerlink" title="UVa"></a>UVa</h2><ul>
<li><a href="./Palindromes.html">0401  Palindromes</a> 判断回文串或镜像串。</li>
<li><a href="./Master-Mind-Hints.html">0340  Master-Mind Hints</a> 猜数字游戏的提示。</li>
<li><a href="./Digit-Generator.html">1583  Digit Generator</a> 生成元。</li>
</ul>
<h2 id="剑指Offer"><a href="#剑指Offer" class="headerlink" title="剑指Offer"></a>剑指Offer</h2><ul>
<li><a href="./offer/002_实现Singleton模式.html">002 实现Singleton模式</a> 一个类只产生一个实例。</li>
<li><a href="./offer/003_数组中的重复数字.html">003 数组中的重复数字</a> 找出数组中任意一个重复的数字。</li>
<li><a href="./offer/004_二维数组中的查找.html">004 二维数组中的查找</a> 有序二维数组中查找一个数字。</li>
<li><a href="./offer/005_替换空格.html">005 替换空格 </a>替换字符串中的每个空格。</li>
<li><a href="./offer/006_从尾到头打印链表.html">006 从尾到头打印链表 </a></li>
</ul>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ul>
<li><a href="./ZigZag-Conversion.html">leetcode - 006  ZigZag Conversion</a></li>
<li><a href="./String-to-Integer.html">leetcode - 008  String to Integer</a></li>
<li><a href="./Palindromes.html">UVa - 0401  Palindromes</a></li>
<li><a href="./integer-to-roman.html">leetcode - 012/013  Integer to Roman / Roman to Integer</a></li>
<li><a href="./longest-common-prefix">leetcode - 014  Longest Common Prefix</a> 最长共同前缀。</li>
<li><a href="./offer/005_替换空格.html">剑指offer - 005_替换空格 </a>替换字符串中的每个空格。</li>
</ul>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><ul>
<li><a href="./Reverse-Integer.html">leetcode - 007  Reverse Integer</a></li>
<li><a href="./String-to-Integer.html">leetcode - 008  String to Integer</a></li>
<li><a href="./Palindrome-Number.html">leetcode - 009  Palindrome Number</a></li>
<li><a href="./Master-Mind-Hints.html">UVa - 0340  Master-Mind Hints</a></li>
<li><a href="./Digit-Generator.html">UVa - 1583  Digit Generator</a></li>
<li><a href="./integer-to-roman.html">leetcode - 012  Integer to Roman</a></li>
</ul>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><ul>
<li><a href="./container-with-most-water.html">leetcode - 011  Container With Most Water</a></li>
<li><a href="./offer/003_数组中的重复数字.html">剑指offer - 003 数组中的重复数字</a> 找出数组中任意一个重复的数字。</li>
<li><a href="./offer/004_二维数组中的查找.html">剑指offer - 004 二维数组中的查找</a> 有序二维数组中查找一个数字。</li>
</ul>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul>
<li><a href="./offer/006_从尾到头打印链表.html">剑指offer - 006 从尾到头打印链表 </a></li>
<li><a href="./leetcode/合并两个有序链表.html">leetcode - 021 合并两个有序链表</a></li>
<li><a href="./leetcode/删除排序链表中的重复元素.html">leetcode - 083 删除排序链表中的重复元素</a></li>
<li><a href="./leetcode/环形链表.html">leetcode - 141/142 环形链表</a></li>
<li><a href="./leetcode/相交链表.html">leetcode - 160 相交链表</a></li>
<li><a href="./leetcode/移除链表元素.html">leetcode - 203 移除链表元素</a></li>
</ul>
<h2 id="Design-pattern"><a href="#Design-pattern" class="headerlink" title="Design pattern"></a>Design pattern</h2><ul>
<li><a href="./offer/002_实现Singleton模式.html">剑指offer - 002 实现Singleton模式</a></li>
</ul>
<h2 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h2><ul>
<li><a href="./leetcode/验证二叉搜索树.html">leetcode - 98 验证二叉搜索树</a></li>
<li><a href="./leetcode/另一个树的子树.html">leetcode - 572 另一个树的子树</a></li>
</ul>
<h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><ul>
<li><a href="./leetcode/最低票价.html">leetcode - 983 最低票价</a></li>
<li><a href="./leetcode/最大正方形-统计全为1的正方形子矩阵.html">leetcode - 221/1277 最大正方形/统计全为1的正方形子矩阵</a></li>
<li><a href="./leetcode/斐波那契数-爬楼梯.html">leetcode - 509/70 斐波那契数/爬楼梯</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[timeline]]></title>
      <url>/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Palindrome Number]]></title>
      <url>/questions/Palindromes.html</url>
      <content type="html"><![CDATA[<p>判断字符串是否为回文串或镜像串。<a id="more"></a></p>
<h1 id="题目-401"><a href="#题目-401" class="headerlink" title="题目 401"></a><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=342" target="_blank" rel="external">题目 401</a></h1><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Input consists of strings (one per line) each of which will consist of one to twenty valid characters.There will be no invalid characters in any of the strings. Your program should read to the end of file.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each input string, you should print the string starting in column 1 immediately followed by exactly one of the following strings.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>NOTAPALINDROME<br>ISAPALINILAPASI<br>2A3MEAS<br>ATOYOTA</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>NOTAPALINDROME – is not a palindrome.<br><br>ISAPALINILAPASI – is a regular palindrome.<br><br>2A3MEAS – is a mirrored string.<br><br>ATOYOTA – is a mirrored palindrome.</p>
<p><strong>Note</strong> </p>
<ul>
<li><strong>‘0’ (zero)</strong> and ‘O’ (the letter) are considered the same character and therefore ONLY the letter ‘O’ is a valid character.</li>
<li>The output line is to include <strong>the ‘-’s and spacing</strong> exactly as shown in the table above and demonstrated in the Sample Output below.</li>
<li>In addition, after each output line, you must print <strong>an empty line</strong>.</li>
</ul>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>依次首尾比较。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>用string数组存储输出信息，用p * 2 + m计算标志位来输出信息。</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> string reverse <span class="token operator">=</span> <span class="token string">"A   3  HIL JM O   2TUVWXY51SE Z  8 "</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> string message<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"not a palindrome"</span><span class="token punctuation">,</span><span class="token string">"a mirrored string"</span><span class="token punctuation">,</span><span class="token string">"a regular palindrome"</span><span class="token punctuation">,</span><span class="token string">"a mirrored palindrome"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token function">mirror</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> reverse<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> reverse<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    string s<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">>></span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">bool</span> p<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
        p <span class="token operator">=</span> m <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> p <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token function">mirror</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> m <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" -- is "</span> <span class="token operator">&lt;&lt;</span> message<span class="token punctuation">[</span>p <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"."</span> <span class="token operator">&lt;&lt;</span>endl <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/questions/%E6%A8%A1%E6%9D%BF.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-0"><a href="#题目-0" class="headerlink" title="题目 0"></a>题目 0</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Integer to Roman / Roman to Integer]]></title>
      <url>/questions/integer-to-roman.html</url>
      <content type="html"><![CDATA[<p>整型、罗马数字互转。<a id="more"></a></p>
<h1 id="题目-12"><a href="#题目-12" class="headerlink" title="题目 12"></a>题目 12</h1><p>Given an integer, convert it to a roman numeral.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h1 id="题目-13"><a href="#题目-13" class="headerlink" title="题目 13"></a>题目 13</h1><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>摸清罗马数字的规律。<a href="https://zh.wikipedia.org/wiki/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97" target="_blank" rel="external">罗马数字wiki</a></p>
<table>
<thead>
<tr>
<th>index</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
</tr>
</thead>
<tbody>
<tr>
<td>Roman</td>
<td>I</td>
<td>V</td>
<td>X</td>
<td>L</td>
<td>C</td>
<td>D</td>
<td>M</td>
</tr>
<tr>
<td>value</td>
<td>1</td>
<td>5</td>
<td>10</td>
<td>50</td>
<td>100</td>
<td>500</td>
<td>1000</td>
</tr>
</tbody>
</table>
<p>t = 1, 3, 5  个位与IVX有关，十位与XLC有关，百位与CDM有关。</p>
<table>
<thead>
<tr>
<th style="text-align:left">余数</th>
<th style="text-align:left">该位对应的罗马数字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1 - 3</td>
<td style="text-align:left">(t-1)…(t-1)</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">(t-1)(t)</td>
</tr>
<tr>
<td style="text-align:left">5 - 8</td>
<td style="text-align:left">(t)(t+1)…(t+1)</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left">(t-1)(t+1)</td>
</tr>
</tbody>
</table>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>Int To Roman：根据数字符号的对应规律，从高位数字开始转换</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">string <span class="token function">intToRoman</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> roman<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'I'</span><span class="token punctuation">,</span><span class="token string">'V'</span><span class="token punctuation">,</span><span class="token string">'X'</span><span class="token punctuation">,</span><span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        string str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            t <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            num <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> 
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                str <span class="token operator">+</span><span class="token operator">=</span> roman<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            str <span class="token operator">+</span><span class="token operator">=</span> roman<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            str <span class="token operator">+</span><span class="token operator">=</span> roman<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            str <span class="token operator">+</span><span class="token operator">=</span> roman<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> x <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                str <span class="token operator">+</span><span class="token operator">=</span> roman<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            str <span class="token operator">+</span><span class="token operator">=</span> roman<span class="token punctuation">[</span>t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            str <span class="token operator">+</span><span class="token operator">=</span> roman<span class="token punctuation">[</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        t <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        num <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//把每一位求得的编码从头插入，不然会倒序</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Roman To Int：一个个字符地转成数字意义</p>
<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> map<span class="token punctuation">;</span>
    map<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    map<span class="token punctuation">[</span><span class="token string">'V'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    map<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    map<span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
    map<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    map<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>
    map<span class="token punctuation">[</span><span class="token string">'M'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> start <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">toInt</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> res <span class="token operator">+</span><span class="token operator">=</span> map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">toInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">&amp;</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">>=</span> b <span class="token operator">&amp;&amp;</span> a <span class="token operator">/</span> b <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            t <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        start <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        t <span class="token operator">+</span><span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>
        start <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span>
        t <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">else</span> 
        start <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Longest Common Prefix]]></title>
      <url>/questions/longest-common-prefix.html</url>
      <content type="html"><![CDATA[<p>最长共同前缀。<a id="more"></a></p>
<h1 id="题目-14"><a href="#题目-14" class="headerlink" title="题目 14"></a>题目 14</h1><p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ul>
<li><p>横向看 （先数组，再看列）<br>$LCP(S<em>{1}…S</em>{n})=LCP(LCP(LCP(S<em>{1},S</em>{2}),S<em>{3}),…S</em>{n})$<br><img src="https://leetcode.com/media/original_images/14_basic.png" alt=""></p>
</li>
<li><p>纵向看（先看列，再数组）</p>
</li>
</ul>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>纵向</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">string <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    string str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//每一列</span>
        <span class="token keyword">char</span> ch <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//数组（相当于行）</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//用标记记录进程，改进见参考</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> str <span class="token operator">+</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>横向</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    String prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prefix <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>        
    <span class="token keyword">return</span> prefix<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>纵向</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>strs <span class="token operator">==</span> null <span class="token operator">||</span> strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">)</span>
                <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//flag改进成     </span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另一种想法：从长到短。先假设prefix为第一个串，依次比较其他串，改变prefix的位数。</p>
<pre class="line-numbers language-cpp"><code class="language-cpp">string <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>

    string prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            prefix <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> prefix<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Digit Generator]]></title>
      <url>/questions/Digit-Generator.html</url>
      <content type="html"><![CDATA[<p>生成元。<a id="more"></a></p>
<h1 id="题目-1583"><a href="#题目-1583" class="headerlink" title="题目 1583"></a><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=4458" target="_blank" rel="external">题目 1583</a></h1><p>如果x加上x的各个数字之和等于y，就说x是y的生成元。245是256 (= 245 + 2 + 4 + 5)的生成元。 </p>
<p>有的数字没有生成元，有的数字不止一个（找到最小的）。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>Your program is to read from standard input. The input consists of T test cases. The number of test cases T is given in the first line of the input. Each test case takes one line containing an integer N, 1 ≤ N ≤ 100, 000.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>Your program is to write to standard output. Print exactly one line for each test case. The line is to contain a generator of N for each test case. If N has multiple generators, print the smallest. If N does not have any generators, print ‘0’.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><pre><code>3
216
121
2005
</code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><pre><code>198
0
1979
</code></pre><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>遍历N-1个数效率低，利用 <strong>y - x数字之和 = x</strong> ，对于y，判断 (y - sum)的数字之和与sum是否相等。首先要求y的位数n，sum的最大可能为 n * 9（x由n个9组成）。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">getDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> nDigit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        nDigit<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> nDigit<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">getSumDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> tmp <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        sum <span class="token operator">+</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cin <span class="token operator">>></span> x <span class="token operator">&amp;&amp;</span>  k <span class="token operator">&lt;</span> c<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">getDigit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token function">getSumDigit</span><span class="token punctuation">(</span>x <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res <span class="token operator">=</span> x <span class="token operator">-</span> i<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>刘汝佳的做法：枚举100000内所有正整数x，计算y，生成表。要用时查表</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h3 id="快速取得一个整数的最高位"><a href="#快速取得一个整数的最高位" class="headerlink" title="快速取得一个整数的最高位"></a><a href="https://stackoverflow.com/questions/701322/how-can-you-get-the-first-digit-in-an-int-c/701621#701621" target="_blank" rel="external">快速取得一个整数的最高位</a></h3><p>查资料过程看到，只有一点相关，但要记录每一位的情况下还是老办法好。</p>
<p>最佳：<strong>Unrolled &amp; optimized loop</strong></p>
<pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">100000000</span><span class="token punctuation">)</span> i <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">100000000</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">10000</span><span class="token punctuation">)</span> i <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> i <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> i <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[删除排序链表中的重复元素]]></title>
      <url>/questions/leetcode/%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-83"><a href="#题目-83" class="headerlink" title="题目 83"></a>题目 83</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200502152924.png" alt=""></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>考察链表操作，比较current和next是否相同，相同则跳过next指向next-&gt;next。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-c++"><code class="language-c++">    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* p = head;
        while (p != nullptr && p->next != nullptr){
            if(p->val == p->next->val)
                p->next = p->next->next;
            else
                p = p->next;
        }
        return head;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[另一个树的子树]]></title>
      <url>/questions/leetcode/%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-572"><a href="#题目-572" class="headerlink" title="题目 572"></a>题目 572</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200508205733.png" alt=""></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="DFS暴力匹配"><a href="#DFS暴力匹配" class="headerlink" title="DFS暴力匹配"></a>DFS暴力匹配</h2><p>DFS枚举s的每个节点，其子树判断与t是否相等。需要有一个指针恒指向t的根，另两个指针在s和t上同步移动。</p>
<h2 id="DFS序列上做串匹配"><a href="#DFS序列上做串匹配" class="headerlink" title="DFS序列上做串匹配"></a>DFS序列上做串匹配</h2><h2 id="树哈希"><a href="#树哈希" class="headerlink" title="树哈希"></a>树哈希</h2><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="DFS暴力匹配-1"><a href="#DFS暴力匹配-1" class="headerlink" title="DFS暴力匹配"></a>DFS暴力匹配</h2><pre class="line-numbers language-c++"><code class="language-c++">    bool isSubtree(TreeNode* s, TreeNode* t) {
        if (!s && !t) return true;
        if (!s && t) return false;
        return compareSubtree(s,t) || isSubtree(s->left, t) || isSubtree(s->right, t);
    }

    bool compareSubtree(TreeNode* s, TreeNode* t) {
        if (!s && !t) return true;
        else if (!s || !t) return false;
        if (s->val == t->val) 
            if( compareSubtree(s->left, t->left) && compareSubtree(s->right, t->right) ) 
                return true;
        return false;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pow(x, n)]]></title>
      <url>/questions/leetcode/Pow(x,n).html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-50"><a href="#题目-50" class="headerlink" title="题目 50"></a>题目 50</h1><p>实现 <a href="https://www.cplusplus.com/reference/valarray/pow/" target="_blank" rel="external">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数。</p>
<p><strong>说明:</strong></p>
<ul>
<li>-100.0 &lt; <em>x</em> &lt; 100.0</li>
<li><em>n</em> 是 32 位有符号整数，其数值范围是$ [−2^{31}, 2^{31} − 1]$ 。</li>
</ul>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>这里有两个坑：</p>
<ul>
<li>重复递归<code>computePow(x, n / 2)</code>，n较大时会超出时间限制。</li>
</ul>
<pre class="line-numbers language-c++"><code class="language-c++">double evenPow = computePow(x, n / 2) * computePow(x, n / 2);
if (n % 2 == 1) return  evenPow * x;
else return evenPow;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p><code>INT_MIN=-2147483648</code>  <code>-INT_MIN = INT_MAX + 1</code></p>
<p>在输入$x=1.00000, n=-2147483648$时<code>-n</code>会溢出，需要特殊处理。</p>
</li>
</ul>
<h2 id="妙蛙种子法（from评论区）"><a href="#妙蛙种子法（from评论区）" class="headerlink" title="妙蛙种子法（from评论区）"></a>妙蛙种子法（from评论区）</h2><p>原理是：把底数变大，指数变小，res存储损失的值。</p>
<ul>
<li><p>for循环的次数即i作减半直到为1的次数，而<code>x *= x</code>相当于对幂作加倍，加倍的次数正好等于减半的次数。</p>
</li>
<li><p>但是由于i/2在i为奇数时会造成损失，损失量刚好是<strong>上一次的x值</strong>，需要把这个值乘到res里面做弥补。</p>
</li>
<li><p>同时<strong>最后一次i/2必然为1</strong>即奇数，所以最终得到的<strong>x和损失量相乘</strong>得到最终结果。</p>
</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="二分法-1"><a href="#二分法-1" class="headerlink" title="二分法"></a>二分法</h2><pre class="line-numbers language-c++"><code class="language-c++">    double myPow(double x, int n) {
        if (n == 0 || x == 1) return 1;
        //处理边界条件
        if (n == INT_MIN) return 1 / (computePow(x, INT_MAX) * x);
        if (n > 0) return computePow(x, n);
        else return 1 / computePow(x, -n);
    }

    double computePow(double x, int n) {
        if (n == 1) return x;
        //只递归一次
        double halfPow = computePow(x, n / 2);
        if (n % 2 == 1) return  halfPow * halfPow * x;
        else return halfPow * halfPow;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>避开边界条件也可以这样写：</p>
<pre class="line-numbers language-c++"><code class="language-c++">    double myPow(double x, int n) {
        if (n == 0) return 1;
        double half = myPow(x, n / 2);
        if (n % 2 == 0) return half * half;
        if (n > 0) return half * half * x;
        return half * half / x;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="妙蛙种子法"><a href="#妙蛙种子法" class="headerlink" title="妙蛙种子法"></a>妙蛙种子法</h2><pre class="line-numbers language-c++"><code class="language-c++">    double myPow(double x, int n) {
        double res = 1.0;
        for (int i = n; i != 0; i /= 2) {
            if (i % 2 != 0) res *= x;
            x *= x;
        }
        return n < 0 ? 1 / res : res;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二叉树的最近公共祖先]]></title>
      <url>/questions/leetcode/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-236"><a href="#题目-236" class="headerlink" title="题目 236"></a>题目 236</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200511170027.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200511170101.png" alt=""></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><blockquote>
<p>注意，这里<code>commonAncestor</code>，<code>p</code>和<code>q</code>都是在同一棵树上，不是两棵树啊！！</p>
</blockquote>
<p>对于一个节点，分别看左右子树是否找到了p或q</p>
<ul>
<li><p>左右子树分别找到了p和q，则最近公共祖先为当前节点。</p>
</li>
<li><p>左子树找到p和q，则最近公共祖先为左节点。</p>
</li>
<li><p>右子树找到p和q，则最近公共祖先为右节点。</p>
</li>
</ul>
<p>递归的边界条件是当前节点为p或q，不用再往下找，祖先一定是自己或再往上。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><pre class="line-numbers language-c++"><code class="language-c++">    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root || root == p || root == q) return root;
        //表示左/右子树是否找到了p或q
        TreeNode* left = lowestCommonAncestor(root->left, p ,q);
        TreeNode* right = lowestCommonAncestor(root->right, p ,q); 
        if (left && right) return root;
        if (left) return left;
        else return right;//若左右都没找到，返回right即null     
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[合并两个有序链表]]></title>
      <url>/questions/leetcode/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-21"><a href="#题目-21" class="headerlink" title="题目 21"></a>题目 21</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200502151923.PNG" alt=""></p>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>判断哪个链表的节点更小，依次比较，需要新增一个合并指示指针p。判断完一个链表时，直接把p指向另一个未判断完的链表（更大）即可。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="迭代-1"><a href="#迭代-1" class="headerlink" title="迭代"></a>迭代</h3><pre class="line-numbers language-c++"><code class="language-c++">    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == nullptr) return l2;
        if(l2 == nullptr) return l1;

        ListNode* head = new ListNode(-1);
        ListNode* p;
        p = head;

        while(l1 != nullptr && l2 != nullptr ){
            if(l1->val <= l2->val){
                p->next = l1;
                l1 = l1->next;
            }
            else {
                p->next = l2;
                l2 = l2->next;
            }
            p = p->next;
        }
        p->next = l1 == nullptr ? l2 : l1; //attention
        return head->next;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最大正方形_统计全为1的正方形子矩阵]]></title>
      <url>/questions/leetcode/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2-%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA1%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E5%AD%90%E7%9F%A9%E9%98%B5.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-221-最大正方形"><a href="#题目-221-最大正方形" class="headerlink" title="题目 221 最大正方形"></a>题目 221 最大正方形</h1><p><img src="/questions/leetcode/C:/Users\Cindy\AppData\Roaming\Typora\typora-user-images\1588943649408.png" alt="1588943649408"></p>
<h1 id="题目-1277-统计全为1的正方形子矩阵"><a href="#题目-1277-统计全为1的正方形子矩阵" class="headerlink" title="题目 1277 统计全为1的正方形子矩阵"></a>题目 1277 统计全为1的正方形子矩阵</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200508213212.png" alt=""></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>tips：</p>
<ul>
<li>注意matrix的类型是int还是char。</li>
<li>定义了动态数组，记得delete。</li>
</ul>
<h2 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h2><p>时间复杂度$O(mnmin(m,n)^2)$</p>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>时间复杂度$O(mn)$</p>
<p>$dp(i,j)$表示以$(i,j)$为右下角，只包含1的正方形的最大边长值。</p>
<ul>
<li><p>该位置为0，$dp(i,j)=0$，该位置不可能位于1的正方形中，连续性中断，重新寻找正方形。</p>
</li>
<li><p>该位置为1，$dp(i,j)$由上方、左下方、右上方三个位置的$dp$决定，状态转移方程：</p>
<p>$$dp(i,j) = min(dp(i-1,j-1),dp(i-1,j),dp(i,j-1)) +1$$</p>
<ul>
<li><p>注意边界条件$i=0$或$j=0$，$dp(i,j)=1$。</p>
</li>
<li><blockquote>
<p>为什么是这样的状态转移方程咧？</p>
<p><a href="https://leetcode-cn.com/problems/maximal-square/solution/li-jie-san-zhe-qu-zui-xiao-1-by-lzhlyle/" target="_blank" rel="external">图解</a>：（来自221题解区）</p>
<p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200508212957.png" alt=""></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="221"><a href="#221" class="headerlink" title="221"></a>221</h2><pre class="line-numbers language-c++"><code class="language-c++">    int maximalSquare(vector<vector<char>>& matrix) {
        if (matrix.size() == 0 || matrix[0].size() == 0) return 0;
        int row = matrix.size();
        int col = matrix[0].size();

        int **dp = new int*[row];
        for (int i = 0; i < row; i++)
            dp[i] = new int[col];

        int ansMax = 0;
        for (int i = 0; i < row; i++){
            for (int j = 0; j < col; j++){
                if (matrix[i][j] == '1') {
                    if (i == 0 || j == 0)
                        dp[i][j] = 1;
                    else
                        dp[i][j] = min( min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1] ) + 1;
                    ansMax = max(dp[i][j], ansMax);
                }
                if (matrix[i][j] == '0') 
                    dp[i][j] = 0;
            }
        }

        for (int i = 0; i < row; i++)
            delete [] dp[i];
        delete [] dp;

        return ansMax * ansMax;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="1277"><a href="#1277" class="headerlink" title="1277"></a>1277</h2><pre class="line-numbers language-c++"><code class="language-c++">    int countSquares(vector<vector<int>>& matrix) {
        if (matrix.size() == 0 || matrix[0].size() == 0) return 0;
        int row = matrix.size();
        int col = matrix[0].size();

        int **dp = new int*[row];
        for (int i = 0; i < row; i++)
            dp[i] = new int[col];

        int sum = 0;
        for (int i = 0; i < row; i++){
            for (int j = 0; j < col; j++){
                if (matrix[i][j] == 1) {
                    if (i == 0 || j == 0)
                        dp[i][j] = 1;
                    else
                        dp[i][j] = min( min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1] ) + 1;
                    sum += dp[i][j];
                }
                if (matrix[i][j] == 0) 
                    dp[i][j] = 0;
            }
        }

        for (int i = 0; i < row; i++)
            delete [] dp[i];
        delete [] dp;

        return sum;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最低票价]]></title>
      <url>/questions/leetcode/%E6%9C%80%E4%BD%8E%E7%A5%A8%E4%BB%B7.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-983"><a href="#题目-983" class="headerlink" title="题目 983"></a>题目 983</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200508190417.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200508190446.png" alt=""></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>题目有<code>最大值</code>一词，是<strong>动态规划</strong>的特点。</p>
<p>用<code>int dp[366]</code>记录一年中到第i天为止需要花的钱，不出门则当天不需要多花钱。<code>dp[0] = 0</code>作为一个初始状态。</p>
<ul>
<li><p>出门，转移方程：$dp(i) = min{cost(index_j)+dp(i-j)}, j\in{1,7,30}$</p>
<ul>
<li><p>理解一：反思式买票</p>
<p>在第10天看我如果在${第9天买1日票，第3天买7日票，直接买30日票}​$哪个划算</p>
</li>
<li><p>理解二：先旅游后买票</p>
<p>一张4-10天的票，第10天付款。（from评论区）</p>
</li>
</ul>
</li>
<li><p>不出门，则不多花钱：$dp(i) = dp(i-1)​$</p>
</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-c++"><code class="language-c++">    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int dp[366] = {0};
        int a, b, c;

        int j = 0;
        for (int i = 1; i < 366; i++) {
            if (j < days.size() && i == days[j]){
                a = costs[0] + dp[i - 1];
                b = costs[1] + dp[ i - 7 > 0 ? i - 7 : 0 ];
                c = costs[2] + dp[ i - 30 > 0 ? i - 30 : 0 ];
                dp[i] = min( min(a, b), c );
                j++;
            }
            else 
                dp[i] = dp[i - 1];
        }
        return dp[days[days.size() - 1]];
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[环形链表]]></title>
      <url>/questions/leetcode/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-141-是否有环"><a href="#题目-141-是否有环" class="headerlink" title="题目 141 是否有环"></a>题目 141 是否有环</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200502154012.png" alt=""></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>快慢指针同时出发，快指针走2步，慢指针走1步，指针相遇则有环，否则无环。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h3><pre class="line-numbers language-c++"><code class="language-c++">    bool hasCycle(ListNode *head) {
        if (head == nullptr) return false;

        ListNode *p, *pp;
        p = pp = head;
        while (p != nullptr && pp !=nullptr && p->next != nullptr && pp->next != nullptr){ //注意判断一下pp->next
            p = p->next;
            pp = pp->next->next;
            if (p == pp) return true;
        }
        return false;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="题目-142-环的入口"><a href="#题目-142-环的入口" class="headerlink" title="题目 142 环的入口"></a>题目 142 环的入口</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200502154110.png" alt=""></p>
<h1 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h1><h3 id="哈希表-1"><a href="#哈希表-1" class="headerlink" title="哈希表"></a>哈希表</h3><h3 id="双指针（Floyd-算法）"><a href="#双指针（Floyd-算法）" class="headerlink" title="双指针（Floyd 算法）"></a>双指针（<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode/" target="_blank" rel="external">Floyd 算法</a>）</h3><p>快慢指针相遇后，其一从起点出发，另一从相遇点出发，步速都为1，相遇则为环的入口点。</p>
<h1 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-c++"><code class="language-c++">    ListNode *detectCycle(ListNode *head) {
        if (head == nullptr || head->next == nullptr) return nullptr;  //判断一下head->next，只有一个数的单链表会影响后续判断

        ListNode *p, *pp;
        p = pp = head;
        while (p != nullptr && pp !=nullptr && pp->next != nullptr){
            p = p->next;
            pp = pp->next->next;
            if (p == pp) break;
        }

        if(p == pp) p = head;
        else return nullptr;  //无环

        while (p != pp){
            p = p->next;
            pp = pp->next;
        }
        return p;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>假设现状是：</p>
<ul>
<li><p>$slow$到达环的入口处，距离起点$L_0$。</p>
</li>
<li><p>$fast$已经进入环，可能已经在环中走了$n’$圈，环长$C$，此时距离​$slow$为​$L_1$。</p>
<p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200502161008.png" alt=""></p>
</li>
<li><p>未来经过时间$t​$，$fast​$比$slow​$多走$n​$圈，$fast​$追上$slow​$，两指针相遇。</p>
</li>
</ul>
<h3 id="（1）有无环"><a href="#（1）有无环" class="headerlink" title="（1）有无环"></a>（1）有无环</h3><p>未来相遇时，从$slow$到达入口点处开始计算，$fast$比$slow$多走$n$圈：</p>
<p>$$(L_1+2t)-t=nC$$</p>
<p>$$L_1+t=nC$$</p>
<p>因为$L_1&lt;C$，存在$t$使得上述等式成立，$fast$多走一圈即可追上$slow$，即$n=1​$。</p>
<blockquote>
<p>$n=0$表示链表是一个完整的环，头结点就是环的入口。</p>
</blockquote>
<h3 id="（2）环的入口"><a href="#（2）环的入口" class="headerlink" title="（2）环的入口"></a>（2）环的入口</h3><p>两指针从起点到相遇点的全部路程为：</p>
<p>$slow​$: $L_0+t​$</p>
<p>$fast​$: $L_0+(L_1+n’C)+2t​$    </p>
<p>​    即$L_0 + t + nC+n’C​$</p>
<blockquote>
<p>注：在$slow$到达入口点这一时刻，$L_1+n’C$表示$fast$已经走过入口点的距离，$2t$表示$fast$还要再走$t$时间才能与$slow$相遇。</p>
</blockquote>
<p>到相遇时，$fast​$走过的路程是$slow​$的2倍：</p>
<p>$$2(L_0+t) = L_0 + t + nC+n’C​$$</p>
<p>$$L_0 = nC+n’C-t$$</p>
<p>由（1）分析知，$fast$多走一圈即可追上$slow$，即$n=1​$。</p>
<p>$$L_0=(C-t)+n’C$$</p>
<p>$(C-t)​$就是从相遇点继续向前，走到环的入口点的距离。</p>
<p>所以，</p>
<p>$$distance_{head_to_entrance} = distance_{cross_to_entrance}​$$</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移除链表元素]]></title>
      <url>/questions/leetcode/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-203"><a href="#题目-203" class="headerlink" title="题目 203"></a>题目 203</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200503104153.png" alt=""></p>
<p>#题解</p>
<p>tips: 删除节点时，注意防止内存泄露。</p>
<h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>初想很简单：</p>
<blockquote>
<ul>
<li>选择要删除节点的前一个结点 prev。</li>
<li>将 prev 的 next 设置为要删除结点的 next</li>
</ul>
</blockquote>
<p>但当要删除的节点位于头结点时，情况会变复杂。因为我们使用头结点指示后面的节点是否需要删除，没有考虑头结点需要删除的情况。可以有以下两种方式：</p>
<ul>
<li>哨兵节点</li>
<li>循环判断第一个节点是否要删除</li>
</ul>
<blockquote>
<p>可以通过<strong>哨兵节点</strong>去解决它，哨兵节点广泛应用于树和链表中，如伪头、伪尾、标记等，它们是纯功能的，通常不保存任何数据，其主要目的是使链表标准化，如使链表永不为空、永不无头、简化插入和删除。</p>
<pre class="line-numbers language-c++"><code class="language-c++">ListNode* sentinel = new ListNode(0);
sentinel->next = head;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>最后返回<code>sentinel-&gt;next</code>即可。</p>
</blockquote>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>简洁有力的实现方式！！</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="迭代-1"><a href="#迭代-1" class="headerlink" title="迭代"></a>迭代</h2><pre class="line-numbers language-c++"><code class="language-c++">    ListNode* removeElements(ListNode* head, int val) {
        if (head == nullptr) return nullptr;

        ListNode* p = head;
        while (p != nullptr && p->next != nullptr) {
            //头结点需删去的情况
            if(p == head && p->val==val){
                ListNode* tmp = head;
                p = head = head->next;
                delete tmp;
                continue;
            }
            (p->next->val == val)? p->next = p->next->next : p = p->next;
        }
        //只有一个结点时，不进入while循环，故需再判断一次
        if (head->val == val) return nullptr;
        else return head;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h2><pre class="line-numbers language-c++"><code class="language-c++">    ListNode* removeElements(ListNode* head, int val) {
        //结束标志
        if (!head) return head;
        //自上而下
        head->next = removeElements(head->next, val);
        //关系，注意防止内存泄露
        if (head->val == val){
            ListNode* tmp = head;
            head = head->next;
            delete tmp;
        }
        return head;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[验证二叉搜索树]]></title>
      <url>/questions/leetcode/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-98"><a href="#题目-98" class="headerlink" title="题目 98"></a>题目 98</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200508183142.png" alt=""></p>
<p>#题解</p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>注意：二叉搜索树是<strong>左子树</strong>小于当前节点，与<strong>左节点</strong>小于当前节点不同。</p>
<p>每一个节点都把区间$(min, max)$分割成$(min, val)$和$(val, max)$两部分，成为递归条件（注意是开区间）。</p>
<blockquote>
<p>这里有一个坑，$min$和$max$需要一个初始值，int和long类型的范围为$[-2147483648, 2147483647]$。测试条件含有边界值的测试样例，本应为true，由于<code>val = -2147483648</code>或<code>val = 2147483647</code>导致在下面语句中错误输出为false。</p>
<p><code>if (root-&gt;val &lt;= min || root-&gt;val &gt;= max) return false;</code></p>
<p>我的写法中偷懒将<code>int</code>改成<code>long long</code>。</p>
<p>较好的方法是使用递归的中序遍历，见解法二。</p>
</blockquote>
<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>中序遍历（左中右）得到的序列是升序的，可以此做判断，可用Stack实现，可递归实现。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h2><h3 id="解法一：使用long-long避开边界值"><a href="#解法一：使用long-long避开边界值" class="headerlink" title="解法一：使用long long避开边界值"></a>解法一：使用long long避开边界值</h3><pre class="line-numbers language-c++"><code class="language-c++">    bool isValidBST(TreeNode* root) {
        return BSTWithMaxMin(root, LONG_MIN, LONG_MAX);
    }

    bool BSTWithMaxMin (TreeNode* root, long long min, long long max) {
        if (!root) return true;
        if (root->val <= min || root->val >= max) return false;
        return BSTWithMaxMin(root->left, min, root->val) && BSTWithMaxMin(root->right,  root->val, max);
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="解法二：中序遍历"><a href="#解法二：中序遍历" class="headerlink" title="解法二：中序遍历"></a><a href="https://leetcode.com/problems/validate-binary-search-tree/discuss/32104/C%2B%2B-in-order-traversal-and-please-do-not-rely-on-buggy-INT_MAX-INT_MIN-solutions-any-more" target="_blank" rel="external">解法二</a>：中序遍历</h3><p>使用节点指针prev记录前一个节点，二叉搜索树中总是<code>prev-&gt;va &lt; node-&gt;val</code>。</p>
<pre class="line-numbers language-c++"><code class="language-c++">    bool isValidBST(TreeNode* root) {
        TreeNode* prev = NULL;
        return validate(root, prev);
    }
    bool validate(TreeNode* node, TreeNode* &prev) {
        if (node == NULL) return true;
        if (!validate(node->left, prev)) return false;
        if (prev != NULL && prev->val >= node->val) return false;
        prev = node;
        return validate(node->right, prev);
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[相交链表]]></title>
      <url>/questions/leetcode/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-160"><a href="#题目-160" class="headerlink" title="题目 160"></a>题目 160</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200502181124.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200502181147.png" alt=""></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>$$a+intersection+b = b+intersection+a​$$</p>
<blockquote>
<ul>
<li><p>当 pA 到达链表的尾部时，将它重定位到链表 B 的头结点 (你没看错，就是链表 B); 类似的，当 pB 到达链表的尾部时，将它重定位到链表 A 的头结点。</p>
</li>
<li><p>若在某一时刻 pA 和 pB 相遇，则 pA/pB 为相交结点。</p>
</li>
<li><p>如果两个链表存在相交，它们末尾的结点必然相同。因此当 pA/pB到达链表结尾时，记录下链表 <code>A/B</code> 对应的元素。若最后元素不相同，则两个链表不相交。</p>
</li>
</ul>
<ul>
<li><p>时间复杂度 $O(m+n)$</p>
</li>
<li><p>空间复杂度 $O(1)$</p>
</li>
</ul>
</blockquote>
<p>巧妙地把指针重定向，形成了类似环形链表（没有改变输入链表）。双指针速度一致，必同时走完全程，即找到相交点。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h3 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h3><pre class="line-numbers language-c++"><code class="language-c++">    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (headA == nullptr || headB == nullptr) return nullptr;

        ListNode *pa, *pb;
        pa = headA;
        pb = headB;

        while (pa != pb){
            pa = (pa == nullptr ? headB : pa->next);
            pb = (pb == nullptr ? headA : pb->next);
        }
        return pa;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[斐波那契数_爬楼梯]]></title>
      <url>/questions/leetcode/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0-%E7%88%AC%E6%A5%BC%E6%A2%AF.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-509-斐波那契数"><a href="#题目-509-斐波那契数" class="headerlink" title="题目 509 斐波那契数"></a>题目 509 斐波那契数</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200508215026.png" alt=""></p>
<h1 id="题目-70-爬楼梯"><a href="#题目-70-爬楼梯" class="headerlink" title="题目 70 爬楼梯"></a>题目 70 爬楼梯</h1><p><img src="https://cdn.jsdelivr.net/gh/cindy1024/ImgBlog/img/20200508215100.png" alt=""></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>暴力法会爆炸，动态规划来一下。</p>
<p>注意：爬楼梯题目，$n=0$时，有1种爬法，就是不爬……..</p>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="509"><a href="#509" class="headerlink" title="509"></a>509</h2><pre class="line-numbers language-c++"><code class="language-c++">    int fib(int N) {
        if (N == 0 || N == 1) return N;
        int* dp = new int[N + 1];
        dp[0] = 0;
        dp[1] = 1;

        for(int i = 2; i <= N; i++) 
            dp[i] = (dp[i -1] + dp[i - 2]);

        int ans = dp[N];
        delete [] dp;
        return ans;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="70"><a href="#70" class="headerlink" title="70"></a>70</h2><pre class="line-numbers language-c++"><code class="language-c++">    int climbStairs(int n) {
        if (n == 0 || n == 1) return 1;
        int* dp = new int[n + 1];
        dp[0] = dp[1] = 1;
        for (int i = 2; i <= n; i++)
            dp[i] = (dp[i - 1] + dp[i - 2]);
        int ans = dp[n];
        delete [] dp;
        return ans;
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[x的平方根]]></title>
      <url>/questions/leetcode/x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-69"><a href="#题目-69" class="headerlink" title="题目 69"></a>题目 69</h1><p>实现 <code>int sqrt(int x)</code> 函数。</p>
<p>计算并返回 x 的平方根，其中 x 是非负整数。</p>
<p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>有几个坑：</p>
<ul>
<li><figcaption>* mid &lt;= x</code>的写法会导致溢出</p></figcaption><pre class="line-numbers language-mid"><code class="language-mid"><p>改成<code>min <= x/mid</code></p>
</li>
<li><p>同理， <code>int mid = (left + right) / 2</code>也会导致溢出</p>
<p>改成<code>int mid = (float)left / 2 + (float)right / 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h2><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="二分法-1"><a href="#二分法-1" class="headerlink" title="二分法"></a>二分法</h2><pre class="line-numbers language-c++"><code class="language-c++">    int mySqrt(int x) {
        if (x == 0 || x == 1) return x;
        return findHalf(x, 1, x);
    }

    int findHalf(int x, int left, int right) {
        int mid = (float)left / 2 + (float)right / 2;
        if (mid <= x / mid && (mid + 1) > x / (mid + 1)) return mid;
        if (left < x / left && mid > x / mid) return findHalf(x, left, mid);
        else return findHalf(x, mid, right);
    }
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="牛顿法-1"><a href="#牛顿法-1" class="headerlink" title="牛顿法"></a>牛顿法</h2>]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/questions/offer/%E6%A8%A1%E6%9D%BF.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-0"><a href="#题目-0" class="headerlink" title="题目 0"></a>题目 0</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数组中的重复数字]]></title>
      <url>/questions/offer/003_%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-003"><a href="#题目-003" class="headerlink" title="题目 003"></a>题目 003</h1><p>在一个长度为n的数组里的<strong>所有数字都在$0$到$n-1$的范围内</strong>。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。</p>
<p>例如，如果输入长度为7的数组${2,3,1,0,2,5,3}$，那么对应的输出是第一个重复的数字$2$。</p>
<ul>
<li>题目一：可修改输入数组</li>
<li>题目二：不可修改输入数组</li>
</ul>
<h1 id="几种解法"><a href="#几种解法" class="headerlink" title="几种解法"></a>几种解法</h1><table>
<thead>
<tr>
<th>序号</th>
<th>方法</th>
<th>时间复杂度</th>
<th>空间复杂度</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>题目一_方法1</td>
<td>排序</td>
<td>$O(n\text{log}n)$</td>
<td>$O(1)$</td>
<td></td>
</tr>
<tr>
<td>题目一_方法2</td>
<td>哈希</td>
<td>$O(n)$</td>
<td>$O(n)$</td>
<td></td>
</tr>
<tr>
<td>题目一_方法3</td>
<td>按下标重排数组</td>
<td>$O(n)$</td>
<td>$O(1)$</td>
<td>每个数字最多交换2次</td>
</tr>
<tr>
<td>题目二_方法1</td>
<td>二分+区间计数</td>
<td>$O(n\text{log}n)$</td>
<td>$O(1)$</td>
<td>不能找出所有重复</td>
</tr>
</tbody>
</table>
<h1 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h1><p>与方法二类似，布尔类型的哈希表。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二维数组中的查找]]></title>
      <url>/questions/offer/004_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE.html</url>
      <content type="html"><![CDATA[<p>有序二维数组中查找一个数字。<a id="more"></a></p>
<h1 id="题目-004"><a href="#题目-004" class="headerlink" title="题目 004"></a>题目 004</h1><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中<strong>是否含有</strong>该整数。<br>$$<br>\begin{matrix}<br>1&amp;2&amp;8&amp;9\2&amp;4&amp;9&amp;12\4&amp;7&amp;10&amp;13\6&amp;8&amp;11&amp;15<br>\end{matrix}<br>$$</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>矩阵有序，从数组中选取一个数字时，有三种情况：</p>
<ol>
<li>$num<em>{select}=num</em>{target}$，返回。</li>
<li>$num<em>{select}&lt;num</em>{target}$，查找数字的<u>右边<strong>或</strong>下面</u>。</li>
<li>$num<em>{select}&gt;num</em>{target}$，查找数字的<u>左边<strong>或</strong>上面</u>。</li>
</ol>
<h1 id="推荐解法"><a href="#推荐解法" class="headerlink" title="推荐解法"></a>推荐解法</h1><p>情况2和3存在重叠区域，从右上或左下的角点开始查找，可以将情况2和3简化成各一个查找区域。</p>
<pre class="line-numbers language-c++"><code class="language-c++">bool Find(int* matrix, int rows, int columns, int number)
{
    bool found = false;

    if(matrix != nullptr && rows > 0 && columns > 0)
    {
        int row = 0;
        int column = columns - 1;
        while(row < rows && column >=0)
        {
            if(matrix[row * columns + column] == number)
            {
                found = true;
                break;
            }
            else if(matrix[row * columns + column] > number)
                -- column;
            else
                ++ row;
        }
    }

    return found;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h1><p>对每一行二分查找。（没有充分利用行间的有序性）</p>
<pre class="line-numbers language-c++"><code class="language-c++">bool Find(int target, vector<vector<int> > array) {
    if (array.size() == 0 || array[0].size() == 0) return false;

    for (unsigned int i = 0; i < array.size(); i++) {
        bool sign = FindMid(target, array, i, 0, array[0].size() - 1);
        if (sign == true)
            return true;
    }
    return false;
}

bool FindMid(const int target, vector<vector<int>> array, const unsigned int row, unsigned int begin, unsigned int end) {
    unsigned int mid = (begin + end) / 2;
    if (array[row][mid] == target) return true;
    if (end - begin == 1) {
        if (array[row][end] == target) return true;
        else return false;
    }
    if (array[row][mid] < target)
        return FindMid(target, array, row, mid, end);
    else
        return FindMid(target, array, row, begin, mid);
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>一开始在想这个问题的时候，从二维数组的中间选取一个数字进行比较，只考虑了右下和左上，漏掉了很多区域，没有想清楚。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[替换空格]]></title>
      <url>/questions/offer/005_%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.html</url>
      <content type="html"><![CDATA[<p>替换字符串中的每个空格。<a id="more"></a></p>
<h1 id="题目-005"><a href="#题目-005" class="headerlink" title="题目 005"></a>题目 005</h1><p>请实现一个函数，将一个字符串中的每个空格替换成<code>%20</code>。例如，当字符串为​<code>We Are Happy.</code>则经过替换之后的字符串为<code>We%20Are%20Happy.</code>。</p>
<h1 id="推荐解法"><a href="#推荐解法" class="headerlink" title="推荐解法"></a>推荐解法</h1><p>遍历数组获取长度，可计算新数组长度，<strong>从后向前</strong>复制替换，注意结尾的’\0’。</p>
<p><a href="https://github.com/zhedahht/CodingInterviewChinese2/blob/master/05_ReplaceSpaces/ReplaceSpaces.cpp" target="_blank" rel="external">https://github.com/zhedahht/CodingInterviewChinese2/blob/master/05_ReplaceSpaces/ReplaceSpaces.cpp</a></p>
<h1 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h1><p>笨蛋解法，由于空格替换成<code>%20</code>会改变数组长度，借用另一个vector做转换。时间$O(n)$，空间$O(n)$。</p>
<pre class="line-numbers language-c++"><code class="language-c++">void replaceSpace(char *str,int length) { //length为字符数组的有效长度
    vector<char> res;
    int count = 0;
    int len = 0; //len记录字符数组的实际长度 
    while(str[len] != '\0'){
        if (str[len] == ' '){
            res.push_back('%');
            res.push_back('2');
            res.push_back('0');
            count++;
        }
        else
            res.push_back(str[len]);
        len++;
    }
    if (len + count * 2 > length) return;
    for (int i = 0; i < len + count * 2; i++)
        str[i] = res[i];
    str[len + count * 2] = '\0'; \\字符数组结尾
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>合并两个数组，涉及重复移动元素，可以考虑从后往前。</p>
<h2 id="字符串与字符数组的长度"><a href="#字符串与字符数组的长度" class="headerlink" title="字符串与字符数组的长度"></a>字符串与字符数组的长度</h2><ul>
<li><p>字符数组的有效长度$\neq$实际长度</p>
</li>
<li><p>数组形参<code>char*</code>等价于<code>char []</code>等价于<code>char[100]</code>， <strong>编译器会忽略任何为数组形参指定的长度</strong> 。64位时，sizeof(形参) = 8；32位时，sizeof(形参) = 4。</p>
</li>
<li><p>strlen函数计算到’\0’停止；sizeof计算包含’\0’。</p>
</li>
<li><p>字符数组与字符串的区别：字符数组是一个数组，每个元素的值都可以改变。而<strong>字符串指针指向的是一个常量字符串，它被存放在程序的静态数据区</strong>，一旦定义就不能改变。</p>
</li>
</ul>
<pre class="line-numbers language-c++"><code class="language-c++">#include <string.h> //strlen()头文件
char str1[] = "hello world";
strlen(str1);                     //11
sizeof(str1)/sizeof(char);         //12

char* str2 = "hello world";
strlen(str2);                     //11
sizeof(str2)/sizeof(char);         //8

char str3[100] = "hello world";
strlen(str3);                     //11
sizeof(str3)/sizeof(char);         //100

//等同于char str4[5]
char str4[] = {'h','e','l','l','o'}; //字符数组不要求最后一个字符为'\0'
strlen(str4);                     //5
sizeof(str3)/sizeof(char);         //8

char str5[6] = {'h','e','l','l','o'}; //其余元素自动复制为空字符'\0'
strlen(str3);                     //5
sizeof(str3)/sizeof(char);         //6
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/513d817e87e9" target="_blank" rel="external">https://www.jianshu.com/p/513d817e87e9</a><br>```</li>
</ul>
<p>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从尾到头打印链表]]></title>
      <url>/questions/offer/006_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8.html</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="题目-006"><a href="#题目-006" class="headerlink" title="题目 006"></a>题目 006</h1><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>
<h1 id="推荐解法"><a href="#推荐解法" class="headerlink" title="推荐解法"></a>推荐解法</h1><p>打印通常是一个只读操作，不希望改变链表，先遍历链表。</p>
<h3 id="解法一-【栈】后进先出"><a href="#解法一-【栈】后进先出" class="headerlink" title="解法一 【栈】后进先出"></a>解法一 【栈】后进先出</h3><pre class="line-numbers language-c++"><code class="language-c++">void PrintListReversingly_Iteratively(ListNode* pHead)
{
    std::stack<ListNode*> nodes;

    ListNode* pNode = pHead;
    while(pNode != nullptr)
    {
        nodes.push(pNode);
        pNode = pNode->m_pNext;
    }

    while(!nodes.empty())
    {
        pNode = nodes.top();
        nodes.pop();
    }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="解法二：【递归】本质上是一个栈结构"><a href="#解法二：【递归】本质上是一个栈结构" class="headerlink" title="解法二：【递归】本质上是一个栈结构"></a>解法二：【递归】本质上是一个栈结构</h3><p>链表很长时，调用层级深，可能导致调用栈溢出，鲁棒性较解法一稍差。</p>
<pre class="line-numbers language-c++"><code class="language-c++">void PrintListReversingly_Recursively(ListNode* pHead)
{
    if(pHead != nullptr)
    {
        if (pHead->m_pNext != nullptr)
        {
            PrintListReversingly_Recursively(pHead->m_pNext);
        }
    }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h1><ul>
<li>分别用步长为1、2的指针遍历，当步长为2的指针完成遍历，步长为1的指针走到中间。</li>
<li>交换对称位置的节点数值。</li>
<li>时间复杂度$O(n)$，空间复杂度$O(n)$。</li>
</ul>
<pre class="line-numbers language-c++"><code class="language-c++">vector<int> reversePrint(ListNode* head) {
    vector<int> res;
    if (head == NULL) return res;

    ListNode* p = head;
    ListNode* pp = head;
    int index = 0;
    while (pp != NULL && pp->next != NULL) {    //分别用步长为1、2的指针找到中间指针
        res.push_back(p->val);
        p = p->next;
        pp = pp->next->next;
        index++;
    }

    int count = 1;                             //用于交换数字时，index往两侧移动
    if (pp != NULL && pp->next == NULL) {    //数目为奇数，中间数不用交换，多走一步
        res.push_back(p->val);
        p = p->next;
    }
    while (p != NULL) {        //交换两侧数字
        res.push_back(res[index - count]);
        res[index - count] = p->val;
        p = p->next;
        count++;
    }
    return res;
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[实现Singleton模式]]></title>
      <url>/questions/offer/002_%E5%AE%9E%E7%8E%B0Singleton%E6%A8%A1%E5%BC%8F.html</url>
      <content type="html"><![CDATA[<p>c#实现单例模式。<a id="more"></a></p>
<h1 id="题目-002"><a href="#题目-002" class="headerlink" title="题目 002"></a>题目 002</h1><p>设计一个类，只能生成该类的一个实例。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>要求只能生成一个实例，构造函数设为私有，其他类不能直接调用该类生成新的对象。“只能生成一个”，想到static的特性。</p>
<h1 id="几种解法"><a href="#几种解法" class="headerlink" title="几种解法"></a>几种解法</h1><ul>
<li><p>方法一：判断静态成员变量是否为空，只适用于单线程。</p>
</li>
<li><p>方法二：在方法一的基础上，加同步锁再判断，可用于多线程。</p>
</li>
<li><p>方法三：修改方法二，加同步锁前后两次判断，减少加锁操作，提高效率。</p>
</li>
<li><p><strong>方法四：</strong>静态构造函数，可能会过早地创建实例。</p>
<blockquote>
<p>创建第一个类实例或任何静态成员被引用时，.NET将自动调用静态构造函数来初始化类。</p>
</blockquote>
<pre class="line-numbers language-c#"><code class="language-c#">public sealed class Singleton4
{
    private Singleton4(){}
    private static Singleton4 instance = new Singleton4();
    public static Singleton4 Instance
    {
        get
        {
            return instance;
        }
    }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>方法五：</strong>按需创建，嵌套类+静态函数。</p>
<ul>
<li>父类的方法用static修饰，是为了绕过类的实例化来调用函数。【必须】</li>
<li>子类的方法和变量用static修饰，是因为静态方法不能<strong>直接</strong>调用非静态成员。</li>
</ul>
<pre class="line-numbers language-c#"><code class="language-c#">public sealed class Singleton5
{
  Singleton5(){}
  public static Singleton5 Instance
  {
      get
      {
          return Nested.instance;
      }
  }

  class Nested
  {
      static Nested(){}
      internal static readonly Singleton5 instance = new Singleton5();
  }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  对方法五做如下修改，使得在Nested类中，不使用静态函数和变量（即方法五中子类不适用static），可达到相同效果：</p>
<pre class="line-numbers language-c#"><code class="language-c#">public sealed class Singleton5
{
  Singleton5(){}
  public static Singleton5 Instance
  {
      get
      {
          Nested n = new Nested(); //modified
          return n.instance;         //modified
      }
  }

  public class Nested
  {
      internal Nested(){} //modified
      internal readonly Singleton5 instance = new Singleton5(); //modified
  }
}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>什么时候可以<strong>不用实例化对象就可以调用类中成员函数</strong>？</p>
<ol>
<li>类的静态成员函数。</li>
<li>非静态成员函数没有使用类的非静态数据成员，调用的其他非静态成员函数也不能使用类的非静态数据成员。</li>
<li>非静态成员函数调用类的静态数据成员。</li>
</ol>
<p>（后面两种可以概括为【non-static的东西没有调用non-static的东西】）</p>
<p>来源：<a href="https://blog.csdn.net/dwb1015/article/details/32933349" target="_blank" rel="external">https://blog.csdn.net/dwb1015/article/details/32933349</a></p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>/analytics.js</url>
      <content type="html"><![CDATA[(function(){/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
var m=this||self,n=function(a,b){a=a.split(".");var c=m;a[0]in c||"undefined"==typeof c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)a.length||void 0===b?c=c[d]&&c[d]!==Object.prototype[d]?c[d]:c[d]={}:c[d]=b};var p=function(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c])},q=function(a){for(var b in a)if(a.hasOwnProperty(b))return!0;return!1};var r=window,t=document,u=function(a,b){t.addEventListener?t.addEventListener(a,b,!1):t.attachEvent&&t.attachEvent("on"+a,b)};var v=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;var w={},x=function(){w.TAGGING=w.TAGGING||[];w.TAGGING[1]=!0};var y=/:[0-9]+$/,A=function(a,b){b&&(b=String(b).toLowerCase());if("protocol"===b||"port"===b)a.protocol=z(a.protocol)||z(r.location.protocol);"port"===b?a.port=String(Number(a.hostname?a.port:r.location.port)||("http"==a.protocol?80:"https"==a.protocol?443:"")):"host"===b&&(a.hostname=(a.hostname||r.location.hostname).replace(y,"").toLowerCase());var c=z(a.protocol);b&&(b=String(b).toLowerCase());switch(b){case "url_no_fragment":b="";a&&a.href&&(b=a.href.indexOf("#"),b=0>b?a.href:a.href.substr(0,
b));a=b;break;case "protocol":a=c;break;case "host":a=a.hostname.replace(y,"").toLowerCase();break;case "port":a=String(Number(a.port)||("http"==c?80:"https"==c?443:""));break;case "path":a.pathname||a.hostname||x();a="/"==a.pathname.substr(0,1)?a.pathname:"/"+a.pathname;a=a.split("/");a:if(b=[],c=a[a.length-1],Array.prototype.indexOf)b=b.indexOf(c),b="number"==typeof b?b:-1;else{for(var d=0;d<b.length;d++)if(b[d]===c){b=d;break a}b="-1}0<=b&&(a[a.length-1]=" ");a="a.join("/");break;case"" "query":a="a.search.replace(" ?","="" "");break;case="" "extension":a="a.pathname.split(" .");a="1<a.length?a[a.length-1]:"";a=a.split("/")[0];break;case"" "fragment":a="a.hash.replace(" #","");break;default:a="a&&a.href}return"" a},z="function(a){return" a?a.replace(":","").tolowercase():""},b="function(a){var" b="t.createElement(" a");a&&(b.href="a);var"" c="b.pathname;" "!="=c[0]&&(a||x(),c="/"+c);a=b.hostname.replace(y,"");return{href:b.href,protocol:b.protocol,host:b.host,hostname:a,pathname:c,search:b.search,hash:b.hash,port:b.port}};function"" c(){for(var="" a="D,b={},c=0;c<a.length;++c)b[a[c]]=c;return" b}function="" e(){var="" ;a+="a.toLowerCase()+" 0123456789-_";return"="" a+"."}var="" d,f;function="" g(a){d="D||E();F=F||C();for(var" d="c+1<a.length,f=c+2<a.length,e=a.charCodeAt(c),g=d?a.charCodeAt(c+1):0,h=f?a.charCodeAt(c+2):0,k=e">>2;e=(e&3)<<4|g>>4;g=(g&15)<<2|h>>6;h&=63;f||(h=64,d||(g=64));b.push(D[k],D[e],D[g],D[h])}return b.join("")}
function H(a){function b(k){for(;d<a.length;){var l="a.charAt(d++),M=F[l];if(null!=M)return" m;if(!="" ^[\s\xa0]*$="" .test(l))throw="" error("unknown="" base64="" encoding="" at="" char:="" "+l);}return="" k}d="D||E();F=F||C();for(var" c="" ,d="0;;){var" f="b(-1),e=b(0),g=b(64),h=b(64);if(64===h&&-1===f)return" c;c+="String.fromCharCode(f<<2|e">>4);64!=g&&(c+=String.fromCharCode(e<<4&240|g>>2),64!=h&&(c+=String.fromCharCode(g<<6&192|h)))}};var 0="=h&&(h=g.fragment?2:1),h===b&&p(f,g.callback()))}return" 60="" i;var="" n="function(){var" a="J,b=K,c=L(),d=function(g){a(g.target||g.srcElement||{})},f=function(g){b(g.target||g.srcElement||{})};if(!c.init){u(" mousedown",d);u("keyup",d);u("submit",f);var"="" e="HTMLFormElement.prototype.submit;HTMLFormElement.prototype.submit=function(){b(this);e.call(this)};c.init=!0}},O=function(a,b,c){for(var" d="L().decorators,f={},e=0;e<d.length;++e){var" g="d[e],h;if(h=!c||g.forms)a:{h=g.domains;var" k="a;if(h&&(g.sameHost||k!==t.location.hostname))for(var" l="0;l<h.length;l++)if(h[l]instanceof" regexp){if(h[l].test(k)){h="!0;break" a}}else="" if(0<="k.indexOf(h[l])){h=!0;break" a}h="!1}h&&(h=g.placement,void" f},l="function(){var" b="r.google_tag_data;r.google_tag_data=void" b};var="" p="/(.*?)\*(.*?)\*(.*)/,aa=/([^?#]+)(\?[^#]*)?(#.*)?/;function" q(a){return="" new="" regexp("(.*?)(^|&)"+a+"="([^&]*)&?(.*)" )}"="" var="" s="function(a){var" in="" a)if(a.hasownproperty(c)){var="" 0!="=d&&d===d&&null!==d&&" [object"="" object]"!="=d.toString()&&(b.push(c),b.push(G(String(d))))}a=b.join(" *");return["1",r(a),a].join("*")},r="function(a,b){a=[window.navigator.userAgent,(new"" date).gettimezoneoffset(),window.navigator.userlanguage||window.navigator.language,math.floor((new="" date).gettime()="" 1e3)-(void="" c="0;256">c;c++){for(var d=c,f=0;8>f;f++)d=d&1?d>>>1^
3988292384:d>>>1;b[c]=d}}I=b;b=4294967295;for(c=0;c<a.length;c++)b=b>>>8^I[(b^a.charCodeAt(c))&255];return((b^-1)>>>0).toString(36)},ca=function(a){return function(b){var c=B(r.location.href),d=c.search.replace("?","");a:{var f=d.split("&");for(var e=0;e<f.length;e++){var 0="==b?3:b;try{if(a){a:{for(var" g="f[e].split(" =");if("_gl"="==decodeURIComponent(g[0]).replace(/\+/g,""" ")){f="g.slice(1).join(" =");break"="" a}}f="void" 0}b.query="T(f||" ")||{};f="A(c,"fragment");e=f.match(Q("_gl"));b.fragment=T(e&&e[3]||"")||{};a&&ba(c,d,f)}};"" function="" u(a,b){if(a="Q(a).exec(b)){var" c="a[2],d=a[4];b=a[1];d&&(b=b+c+d)}return" b}="" var="" ba="function(a,b,c){function" d(e,g){e="U(" _gl",e);e.length&&(e="g+e);return"" e}if(r.history&&r.history.replacestate){var="" f="Q(" _gl");if(f.test(b)||f.test(c))a="A(a,"path"),b=d(b,"?"),c=d(c,"#"),r.history.replaceState({},void"" 0,""+a+b+c)}},t="function(a){var" b="void">c;++c){var d=P.exec(a);if(d){var f=d;break a}a=decodeURIComponent(a)}f=void 0}if(f&&"1"===f[1]){var e=f[2],g=f[3];a:{for(f=0;f<b;++f)if(e===r(g,f)){var 0="==d?!1:d;var" h="!0;break" a}h="!1}if(h){b={};var" k="g?g.split(" *"):"="" [];for(g="0;g<k.length;g+=2)b[k[g]]=H(k[g+1]);return" b}}}}catch(l){}};function="" v(a,b,c,d){function="" f(k){k="U(a,k);var" l="k.charAt(k.length-1);k&&" &"!="=l&&(k+="&");return"" k+h}d="void" e="aa.exec(c);if(!e)return" ";c="e[1];var"" g="e[2]||" ";e="e[3]||"";var"" function="" w(a,b){var="" c="FORM" =="=(a.tagName||" ").touppercase(),d="O(b,1,c),f=O(b,2,c);b=O(b,3,c);q(d)&&(d=S(d),c?X("_gl",d,a):Y("_gl",d,a,!1));!c&&q(f)&&(c=S(f),Y("_gl",c,a,!0));for(var"" in="" b)b.hasownproperty(e)&&z(e,b[e],a)}function="" z(a,b,c,d){if(c.tagname){if("a"="==c.tagName.toLowerCase())return" y(a,b,c,d);if("form"="==c.tagName.toLowerCase())return" x(a,b,c)}if("string"="=typeof" c)return="" v(a,b,c,d)}function="" y(a,b,c,d){c.href&&(a="V(a,b,c.href,void" x(a,b,c){if(c&&c.action){var="" d="(c.method||" ").tolowercase();if("get"="==d){d=c.childNodes||[];for(var"" f="!1,e=0;e<d.length;e++){var" var="" j="function(a){try{a:{for(var" b="100;a&&0<b;){if(a.href&&a.nodeName.match(/^a(?:rea)?$/i)){var" a}a="a.parentNode;b--}c=null}if(c){var" z("_gl",a,b,!!c)});n("google_tag_data.glbridge.generate",s);n("google_tag_data.glbridge.get",function(a,b){var="" c});})(window);="" (function(){function="" la(a){var="">>21:b}return b};/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/
var $c=function(a){this.w=a||[]};$c.prototype.set=function(a){this.w[a]=!0};$c.prototype.encode=function(){for(var a=[],b=0;b<this.w.length;b++)this.w[b]&&(a[math.floor(b 0="=a.indexOf(b)},sa=function(a){return" 6)]^="1<<b%6);for(b=0;b<a.length;b++)a[b]=" abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789-_".charat(a[b]||0);return"="" a.join("")+"~"};var="" ha="window.GoogleAnalyticsObject,F;if(F=void" 0!="ha)F=-1<(ha.constructor+" ").indexof("string");var"="" wa;if(wa="F){var" ea="window.GoogleAnalyticsObject;wa=Ea?Ea.replace(/^[\s\xa0]+|[\s\xa0]+$/g," "):""}var"="" gb="wa||" ga",jd="/^(?:utma\.)?\d+\.\d+$/,kd=/^amp-[\w.-]{22,64}$/,Ba=!1;var"" vd="new" $c;function="" j(a){vd.set(a)}var="" td="function(a){a=Dd(a);a=new" $c(a);for(var="" b="vd.w.slice(),c=0;c<a.w.length;c++)b[c]=b[c]||a.w[c];return(new" $c(b)).encode()},dd="function(a){a=a.get(Gd);ka(a)||(a=[]);return" a};var="" a},ka="function(a){return" [object"="" array]"="=Object.prototype.toString.call(Object(a))},qa=function(a){return" void="" a?a.replace(="" ^[\s\xa0]+|[\s\xa0]+$="" g,""):""},ra="function(){for(var" a="O.navigator.userAgent+(M.cookie?M.cookie:" ")+(m.referrer?m.referrer:""),b="a.length,c=O.history.length;0<c;)a+=c--^b++;return[hd()^La(a)&2147483647,Math.round((new"" date).gettime()="" 1e3)].join(".")},ta="function(a){var" b},ua="function(){},K=function(a){if(encodeURIComponent" instanceof="" function)return="" encodeuricomponent(a);j(28);return="" a},l="function(a,b,c,d){try{a.addEventListener?a.addEventListener(b,c,!!d):a.attachEvent&&a.attachEvent(" on"+b,c)}catch(e){j(27)}},f="/^[\w\-:/.?=&%!\[\]]+$/,Nd=/^[\w+/_-]+[=]{0,2}$/,be=function(a,b){return"" e(m.location[b?"href":"search"],a)},e="function(a,b){return(a=a.match(" (?:&|#|\\?)"+"="" k(b).replace(="" ([.*+?^="!:${}()|\[\]\/\\])/g," \\$1")+"="([^&#]*)"))&&2==a.length?a[1]:""},xa=function(){var"" +m.location.hostname;return="" c="a.indexOf(b);if(5==c||6==c)if(a=a.charAt(c+b.length)," "="=a||"?"==a||""==a||":"==a)return!0;return!1},ya=function(a,b){var"" c;a="//" +m.location.hostname;if(!de(c,a))return="" b&&(b="a.replace(/\./g," -")+".cdn.ampproject.org",de(c,b))?void"="" 0:="" c}},za="function(a,b){if(1==b.length&&null!=b[0]&&" object"="==typeof"" b[0])return="" b[0];for(var="" b[e]){for(var="" g="" in="" b[e])b[e].hasownproperty(g)&&(c[g]="b[e][g]);break}else" e<a.length&&(c[a[e]]="b[e]);return" c};var="" ee="function(){this.keys=[];this.values={};this.m={}};ee.prototype.set=function(a,b,c){this.keys.push(a);c?this.m[" :"+a]="b:this.values[":"+a]=b};ee.prototype.get=function(a){return"" this.m.hasownproperty(":"+a)?this.m[":"+a]:this.values[":"+a]};ee.prototype.map="function(a){for(var" o="window,M=document,va=function(a,b){return" settimeout(a,b)};var="" qa="window,Za=document,G=function(a){var" d="b[c].split(" ="),e="d[0].replace(/^\s*|\s*$/g,"");e&&"AMP_TOKEN"==e&&((d=d.slice(1).join("=").replace(/^\s*|\s*$/g,""))&&(d=decodeURIComponent(d)),a.push(d))}for(b=0;b<a.length;b++)if("$OPT_OUT"==a[b])return!0;return"" za.getelementbyid("__gaoptoutextension")?="" !0:!1};var="" ca="function(a){var" regexp("^\\s*"+a+"="\\s*(.*?)\\s*$" );for(var"="" e="c[d].match(a);e&&b.push(e[1])}return" b},zc="function(a,b,c,d,e,g,ca){e=G(e)?!1:eb.test(M.location.hostname)||" path="+c+" ;="" ";g&&(c+="expires=" +(new="" date((new="" date).gettime()+g)).togmtstring()+";="" ");d&&"none"!="=d&&(c+=" domain="+d+" ;");ca&&(c+="ca+";");d=M.cookie;M.cookie=c;if(!(d=d!=M.cookie))a:{a="" ca(a);for(d="0;d<a.length;d++)if(b==a[d]){d=!0;break" a}d="!1}return" d},cc="function(a){return" encodeuricomponent?encodeuricomponent(a).replace(="" \(="" g,"%28").replace(="" \)="" g,"%29"):a},vc="/^(www\.)?google(\.com?)?(\.[a-z]{2})?$/,eb=/(^|\.)doubleclick\.net$/i;var" oc,id="/^.*Version\/?(\d+)[^\d].*$/i,ne=function(){if(void" o.__ga4__;if(void="" oc="!1}return" oc};var="" fa,ga,fb,ab,ja="/^https?:\/\/[^/]*cdn\.ampproject\.org\//,Ue=/^(?:www\.|m\.|amp\.)+/,Ub=[],da=function(a){if(ye(a[Kd])){if(void" b;if(b="(b=De.get())&&b._ga||void" 0)ab="b,J(81)}if(void" a[q]||(a[q]="Ab),!1}if(a[Kd]){J(67);if(a[ac]&&" cookie"!="a[ac])return!1;if(void"" if(b="Ca(" amp_token"),0="=b.length)b=!0;else{if(1==b.length&&(b=decodeURIComponent(b[0]),"" "$retrieving"="=b||" $opt_out"="=b||"$ERROR"==b||"$NOT_FOUND"==b)){b=!0;break"" a}b="!1}}if(b&&tc(ic,String(a[Na])))return!0}}return!1},ic=function(){Z.D([ua])},tc=function(a,b){var" j(55),!1;c="decodeURIComponent(c[0]||" ");if("$opt_out"="=c||"$ERROR"==c||G(b))return"" j(62),!1;if(!ja.test(m.referrer)&&"$not_found"="=c)return" j(68),!1;if(void="" j(56),va(function(){a(ab)},0),!0;if(fa)return="" ub.push(a),!0;if("$retrieving"="=c)return" j(57),va(function(){tc(a,b)},="" 1e4),!0;fa="!0;c&&" $"!="c[0]||(xc("$RETRIEVING",3E4),setTimeout(Mc,3E4),c="");return"" pc(c,b)?(ub.push(a),!0):!1},pc="function(a,b,c){if(!window.JSON)return" j(58),!1;var="" j(59),!1;var="" d;if(!("withcredentials"in="" e))return="" j(60),!1;e.open("post",(c||"https:="" ampcid.google.com="" v1="" publisher:getclientid")+"?key="AIzaSyA65lEHUEizIsNtlbNo-l2K18dT680nsaM" ,!0);e.withcredentials="!0;e.setRequestHeader("Content-Type","text/plain");e.onload=function(){Fa=!1;if(4==e.readyState){try{200!="" e.status&&(j(61),qc("","$error",3e4));var="" fb){fb="" ;for(var="" c.indexof("xn--")){c="" ;break="" b}(c="c.match(/(.*)\.cdn\.ampproject\.org\/?$/))&&2==c.length&&(d=c[1].replace(/-/g," .").replace(="" \.\.="" g,"-"))}c="d?d.replace(Ue,""):""}(d=b===c)||(c="."+c,d=b.substring(b.length-c.length,b.length)===c);if(d){b=!0;break"" a}else="" j(78)}b="!1}return" b&&!1!="=a};var" bd="function(a){return(a?" https:":ba||"https:"="=M.location.protocol?"https:":"http:")+"//www.google-analytics.com"},Da=function(a){this.name="len";this.message=a+"-8192"},ba=function(a,b,c){c=c||ua;if(2036"">=b.length)wc(a,b,c);else if(8192>=b.length)x(a,b,c)||wd(a,b,c)||wc(a,b,c);else throw ge("len",b.length),new Da(b.length);},pe=function(a,b,c,d){d=d||ua;wd(a+"?"+b,"",d,c)},wc=function(a,b,c){var d=ta(a+"?"+b);d.onload=d.onerror=function(){d.onload=null;d.onerror=null;c()}},wd=function(a,b,c,
d){var e=O.XMLHttpRequest;if(!e)return!1;var g=new e;if(!("withCredentials"in g))return!1;a=a.replace(/^http:/,"https:");g.open("POST",a,!0);g.withCredentials=!0;g.setRequestHeader("Content-Type","text/plain");g.onreadystatechange=function(){if(4==g.readyState){if(d)try{var ca=g.responseText;if(1>ca.length)ge("xhr","ver","0"),c();else if("1"!=ca.charAt(0))ge("xhr","ver",String(ca.length)),c();else if(3<d.count++)ge("xhr","tmr",""+d.count),c();else if(1="=ca.length)c();else{var" l="ca.charAt(1);if(" d"="="" l)pe("https:="" stats.g.doubleclick.net="" j="" collect",d.u,d,c);else="" if("g"="=l){wc(" https:="" www.google.%="" ads="" ga-audiences".replace("%","com"),d.google,c);var"="" k="ca.substring(2);k&&(/^[a-z.]{1,6}$/.test(k)?wc(" ga-audiences".replace("%",k),d.google,ua):ge("tld","bcc",k))}else"="" ge("xhr","brc",l),c()}}catch(w){ge("xhr","rsp"),c()}else="" c();g="null}};g.send(b);return!0},x=function(a,b,c){return" o.navigator.sendbeacon?o.navigator.sendbeacon(a,b)?(c(),!0):!1:!1},ge="function(a,b,c){1<=100*" math.random()||g("?")||(a="[" t="error","_e="+a,"_v=j82","sr=1"],b&&a.push("_f="+b),c&&a.push("_m="+K(c.substring(0,100))),a.push("aip=1"),a.push("z="+hd()),wc(bd(!0)+"/u/d",a.join("&"),ua))};var"" qc="function(){return" o.gadata="O.gaData||{}},h=function(a){var" b="qc();return" b[a]="b[a]||{}};var" ha="function(){this.M=[]};Ha.prototype.add=function(a){this.M.push(a)};Ha.prototype.D=function(a){try{for(var" c="a.get(this.M[b]);c&&ea(c)&&c.call(O,a)}}catch(d){}b=a.get(Ia);b!=ua&&ea(b)&&(a.set(Ia,ua,!0),setTimeout(b,10))};function" ja(a){if(100!="a.get(Ka)&&La(P(a,Q))%1E4">=100*R(a,Ka))throw"abort";}function Ma(a){if(G(P(a,Na)))throw"abort";}function Oa(){var a=M.location.protocol;if("http:"!=a&&"https:"!=a)throw"abort";}
function Pa(a){try{O.navigator.sendBeacon?J(42):O.XMLHttpRequest&&"withCredentials"in new O.XMLHttpRequest&&J(40)}catch(c){}a.set(ld,Td(a),!0);a.set(Ac,R(a,Ac)+1);var b=[];ue.map(function(c,d){d.F&&(c=a.get(c),void 0!=c&&c!=d.defaultValue&&("boolean"==typeof c&&(c*=1),b.push(d.F+"="+K(""+c))))});!1===a.get(xe)&&b.push("npa=1");b.push("z="+Bd());a.set(Ra,b.join("&"),!0)}
function Sa(a){var b=P(a,fa);!b&&a.get(Vd)&&(b="beacon");var c=P(a,gd),d=P(a,oe),e=c||(d||bd(!1)+"")+"/collect";switch(P(a,ad)){case "d":e=c||(d||bd(!1)+"")+"/j/collect";b=a.get(qe)||void 0;pe(e,P(a,Ra),b,a.Z(Ia));break;case "b":e=c||(d||bd(!1)+"")+"/r/collect";default:b?(c=P(a,Ra),d=(d=a.Z(Ia))||ua,"image"==b?wc(e,c,d):"xhr"==b&&wd(e,c,d)||"beacon"==b&&x(e,c,d)||ba(e,c,d)):ba(e,P(a,Ra),a.Z(Ia))}e=P(a,Na);e=h(e);b=e.hitcount;e.hitcount=b?b+1:1;e.first_hit||(e.first_hit=(new Date).getTime());e=P(a,
Na);delete h(e).pending_experiments;a.set(Ia,ua,!0)}function Hc(a){qc().expId&&a.set(Nc,qc().expId);qc().expVar&&a.set(Oc,qc().expVar);var b=P(a,Na);if(b=h(b).pending_experiments){var c=[];for(d in b)b.hasOwnProperty(d)&&b[d]&&c.push(encodeURIComponent(d)+"."+encodeURIComponent(b[d]));var d=c.join("!")}else d=void 0;d&&a.set(m,d,!0)}function cd(){if(O.navigator&&"preview"==O.navigator.loadPurpose)throw"abort";}
function yd(a){var b=O.gaDevIds||[];if(ka(b)){var c=a.get("&did");qa(c)&&0<c.length&&(b=b.concat(c.split(",")));c=[];for(var d="0;d<b.length;d++){var" e;a:{for(e="0;e<c.length;e++)if(b[d]==c[e]){e=!0;break" a}e="!1}e||c.push(b[d])}0!=c.length&&a.set(" &did",c.join(","),!0)}}function"="" vb(a){if(!a.get(na))throw"abort";};var="" hd="function(){return" math.round(2147483647*math.random())},bd="function(){try{var" a="new" uint32array(1);o.crypto.getrandomvalues(a);return="" a[0]&2147483647}catch(b){return="" hd()}};function="" ta(a){var="" b="R(a,Ua);500<=b&&J(15);var" c="P(a,Va);if(" transaction"!="c&&"item"!=c){c=R(a,Wa);var"" date).gettime(),e="R(a,Xa);0==e&&a.set(Xa,d);e=Math.round(2*(d-e)/1E3);0<e&&(c=Math.min(c+e,20),a.set(Xa,d));if(0">=c)throw"abort";a.set(Wa,--c)}a.set(Ua,++b)};var Ya=function(){this.data=new ee};Ya.prototype.get=function(a){var b=$a(a),c=this.data.get(a);b&&void 0==c&&(c=ea(b.defaultValue)?b.defaultValue():b.defaultValue);return b&&b.Z?b.Z(this,a,c):c};var P=function(a,b){a=a.get(b);return void 0==a?"":""+a},R=function(a,b){a=a.get(b);return void 0==a||""===a?0:Number(a)};Ya.prototype.Z=function(a){return(a=this.get(a))&&ea(a)?a:ua};
Ya.prototype.set=function(a,b,c){if(a)if("object"==typeof a)for(var d in a)a.hasOwnProperty(d)&&ab(this,d,a[d],c);else ab(this,a,b,c)};var ab=function(a,b,c,d){if(void 0!=c)switch(b){case Na:wb.test(c)}var e=$a(b);e&&e.o?e.o(a,b,c,d):a.data.set(b,c,d)};var ue=new ee,ve=[],bb=function(a,b,c,d,e){this.name=a;this.F=b;this.Z=d;this.o=e;this.defaultValue=c},$a=function(a){var b=ue.get(a);if(!b)for(var c=0;c<ve.length;c++){var 0="==c&&(c=Bd());return" d="ve[c],e=d[0].exec(a);if(e){b=d[1](e);ue.set(b.name,b);break}}return" b},yc="function(a){var" b;ue.map(function(c,d){d.f="=a&&(b=d)});return" b&&b.name},s="function(a,b,c,d,e){a=new" bb(a,b,c,d,e);ue.set(a.name,a);return="" a.name},cb="function(a,b){ve.push([new" regexp("^"+a+"$"),b])},t="function(a,b,c){return" s(a,b,c,void="" 0,db)},db="function(){};var" hb="T(" apiversion","v"),ib="T("clientVersion","_v");S("anonymizeIp","aip");var"" jb="S(" adsenseid","a"),va="S("hitType","t"),Ia=S("hitCallback"),Ra=S("hitPayload");S("nonInteraction","ni");S("currencyCode","cu");S("dataSource","ds");var"" vd="S(" usebeacon",void"="" 0,!1),fa="S(" transport");s("sessioncontrol","sc","");s("sessiongroup","sg");s("queuetime","qt");var"="" ac="S(" _s","_s");s("screenname","cd");var"="" kb="S(" location","dl",""),lb="S("referrer","dr"),mb=S("page","dp","");S("hostname","dh");"" var="" nb="S(" language","ul"),ob="S("encoding","de");S("title","dt",function(){return"" m.title||void="" 0});cb("contentgroup([0-9]+)",function(a){return="" new="" bb(a[0],"cg"+a[1])});var="" pb="S(" screencolors","sd"),qb="S("screenResolution","sr"),rb=S("viewportSize","vp"),sb=S("javaEnabled","je"),tb=S("flashVersion","fl");S("campaignId","ci");S("campaignName","cn");S("campaignSource","cs");S("campaignMedium","cm");S("campaignKeyword","ck");S("campaignContent","cc");"" ub="S(" eventcategory","ec"),xb="S("eventAction","ea"),yb=S("eventLabel","el"),zb=S("eventValue","ev"),Bb=S("socialNetwork","sn"),Cb=S("socialAction","sa"),Db=S("socialTarget","st"),Eb=S("l1","plt"),Fb=S("l2","pdt"),Gb=S("l3","dns"),Hb=S("l4","rrt"),Ib=S("l5","srt"),Jb=S("l6","tcp"),Kb=S("l7","dit"),Lb=S("l8","clt"),Ve=S("l9","_gst"),We=S("l10","_gbt"),Xe=S("l11","_cst"),Ye=S("l12","_cbt"),Mb=S("timingCategory","utc"),Nb=S("timingVar","utv"),Ob=S("timingLabel","utl"),Pb=S("timingValue","utt");"" s("appname","an");s("appversion","av","");s("appid","aid","");s("appinstallerid","aiid","");s("exdescription","exd");s("exfatal","exf");var="" nc="S(" expid","xid"),oc="S("expVar","xvar"),m=S("exp","exp"),Rc=S("_utma","_utma"),Sc=S("_utmz","_utmz"),Tc=S("_utmht","_utmht"),Ua=S("_hc",void"" 0,0),xa="S(" _ti",void"="" 0,0),wa="S(" _to",void"="" 0,20);cb("dimension([0-9]+)",function(a){return="" bb(a[0],"cd"+a[1])});cb("metric([0-9]+)",function(a){return="" bb(a[0],"cm"+a[1])});s("linkerparam",void="" 0,void="" 0,bc,db);="" ze="T(" _cd2l",void"="" 0,!1),ld="S(" usage","_u"),gd="S("_um");S("forceSSL",void"" 0,function(){return="" ba},function(a,b,c){j(34);ba="!!c});var" ed="S(" _j1","jid"),ia="S("_j2","gjid");cb("\\&(.*)",function(a){var"" b="new" bb(a[0],a[1]),c="yc(a[0].substring(1));c&&(b.Z=function(d){return" d.get(c)},b.o="function(d,e,g,ca){d.set(c,g,ca)},b.F=void" 0);return="" b});="" qb="T(" _oot"),dd="S("previewTask"),Rb=S("checkProtocolTask"),md=S("validationTask"),Sb=S("checkStorageTask"),Uc=S("historyImportTask"),Tb=S("samplerTask"),Vb=S("_rlt"),Wb=S("buildHitTask"),Xb=S("sendHitTask"),Vc=S("ceTask"),zd=S("devIdTask"),Cd=S("timingTask"),Ld=S("displayFeaturesTask"),oa=S("customTask"),ze=S("fpsCrossDomainTask"),V=T("name"),Q=T("clientId","cid"),n=T("clientIdTime"),xd=T("storedClientId"),Ad=S("userId","uid"),Na=T("trackingId","tid"),U=T("cookieName",void"" 0,"_ga"),w="T(" cookiedomain"),"="" yb="T(" cookiepath",void"="" 0,"="" "),zb="T(" cookieexpires",void"="" 0,63072e3),hd="T(" cookieupdate",void"="" 0,!0),be="T(" cookieflags",void"="" 0,""),$b="T(" legacycookiedomain"),wc="T("legacyHistoryImport",void"" 0,!0),ac="T(" storage",void"="" 0,"cookie"),bc="T(" allowlinker",void"="" 0,!1),cc="T(" allowanchor",void"="" 0,!0),ka="T(" samplerate","sf",100),dc="T("siteSpeedSampleRate",void"" 0,1),ec="T(" alwayssendreferrer",void"="" 0,!1),i="T(" _gid","_gid"),la="T("_gcn"),Kd=T("useAmpClientId"),ce=T("_gclid"),fe=T("_gt"),he=T("_ge",void"" 0,7776e6),ie="T(" _gclsrc"),"="" je="T(" storegac",void"="" 0,!0),oe="S(" _x_19"),ae="S("_fplc"),gd=S("transportUrl"),Md=S("_r","_r"),qe=S("_dp"),ad=S("_jt",void"" 0,"n"),ud="S(" allowadfeatures",void"="" 0,!0),xe="S(" allowadpersonalizationsignals",void"="" 0,!0);function="" x(a,b,c,d){b[a]="function(){try{return" d&&j(d),c.apply(this,arguments)}catch(e){throw="" ge("exc",a,e&&e.name),e;}}};var="" od="function(){this.V=100;this.$=this.fa=!1;this.oa=" detourexp";this.groups="1},Ed=function(a){var"" od,c;if(b.fa&&b.$)return="" 0;b.$="!0;if(a){if(b.oa&&void" 0!="=a.get(b.oa))return" r(a,b.oa);if(0="=a.get(dc))return" 0}if(0="=b.V)return" 0;void="" fc(){var="" a,b;if((b="(b=O.navigator)?b.plugins:null)&&b.length)for(var" c="0;c<b.length&&!a;c++){var" flash")&&(a="d.description)}if(!a)try{var" e="new" activexobject("shockwaveflash.shockwaveflash.7");a="e.GetVariable(" $version")}catch(g){}if(!a)try{e="new"" activexobject("shockwaveflash.shockwaveflash.6"),a="WIN 6,0,21,0" ,e.allowscriptaccess="always" ,a="e.GetVariable(" activexobject("shockwaveflash.shockwaveflash"),a="e.GetVariable(" $version")}catch(g){}a&&"="" (e="a.match(/[\d]+/g))&&3<=e.length&&(a=e[0]+" ."+e[1]+""="" r"+e[2]);return="" a||void="" 0};var="" ee="function(){var" a="Ca(" fplc");return"="" 0<a.length?a[0]:void="" 0},fe="function(a){P(a,oe)&&a.get(Ze)&&a.set(Ae,Ee()||" ")};var"="" aa="function(a){var" la(p(a,q))%100="">=b?!1:!0},gc=function(a){var b={};if(Ec(b)||Fc(b)){var c=b[Eb];void 0==c||Infinity==c||isNaN(c)||(0<c?(y(b,gb),y(b,jb),y(b,ib),y(b,fb),y(b,hb),y(b,kb),y(b,lb),y(b,ve),y(b,we),y(b,xe),y(b,ye),va(function(){a(b)},10)):l(o,"load",function(){gc(a)},!1))}},ec=function(a){var 0="=c)return!1;" b="O.performance||O.webkitPerformance;b=b&&b.timing;if(!b)return!1;var" c="b.navigationStart;if(0==c)return!1;a[Eb]=b.loadEventStart-c;a[Gb]=b.domainLookupEnd-b.domainLookupStart;" a[jb]="b.connectEnd-b.connectStart;a[Ib]=b.responseStart-b.requestStart;a[Fb]=b.responseEnd-b.responseStart;a[Hb]=b.fetchStart-c;a[Kb]=b.domInteractive-c;a[Lb]=b.domContentLoadedEventStart-c;a[Ve]=N.L-c;a[We]=N.ya-c;O.google_tag_manager&&O.google_tag_manager._li&&(b=O.google_tag_manager._li,a[Xe]=b.cst,a[Ye]=b.cbt);return!0},Fc=function(a){if(O.top!=O)return!1;var" 0);2147483648<c&&(c="void" 0);0<c&&b.setpagereadytime();if(void="" a[eb]="c;return!0},Y=function(a,b){var">c)a[b]=void 0},Fd=function(a){return function(b){if("pageview"==b.get(Va)&&!a.I){a.I=!0;var c=aa(b),d=0<e(p(b,kb),"gclid").length;(c||d)&&gc(function(e){c&&a.send("timing",e);d&&a.send("adtiming",e)})}}};var hc="!1,mc=function(a){if(" cookie"="=P(a,ac)){if(a.get(Hd)||P(a,xd)!=P(a,Q)){var"" b="1E3*R(a,Zb);ma(a,Q,U,b);a.data.set(xd,P(a,Q))}(a.get(Hd)||uc(a)!=P(a,I))&&ma(a,I,la,864E5);if(a.get(je)){var" c="P(a,ce);if(c){var" d="Math.min(R(a,he),1E3*R(a,Zb));d=Math.min(d,1E3*R(a,fe)+d-(new" date).gettime());a.data.set(he,d);b="{};var" e="P(a,fe),g=P(a,ie),ca=kc(P(a,Yb)),l=lc(P(a,W)),k=P(a,Na),w=P(a,Be);g&&" aw.ds"!="g?b&&(b.ua=!0):(c=["1",e,Cc(c)].join("."),0<d&&(b&&(b.ta=!0),zc("_gac_"+Cc(k),c,ca,l,k,d,w)));le(b)}}else"" j(75);="" (a="P(a,Ae))&&zc(" fplc",a,"="" ","none","",void"="" 0,"secure")}},ma="function(a,b,c,d){var" g="kc(P(a,Yb)),ca=lc(P(a,W)),l=P(a,Be),k=P(a,Na);if(" auto"!="ca)zc(c,e,g,ca,k,d,l)&&(hc=!0);else{J(32);for(var"" w="id(),Ce=0;Ce<w.length;Ce++)if(ca=w[Ce],a.data.set(W,ca),e=nd(a,b),zc(c,e,g,ca,k,d,l)){hc=!0;return}a.data.set(W," auto")}}},uc="function(a){var"" xd(a,b)},nc="function(a){if(" w),c="P(a,$b)||xa(),d=Xc(" __utma",c,b);d&&(j(19),a.set(tc,(new"="" date).gettime(),!0),a.set(rc,d.r),(b="Xc(" __utmz",c,b))&&d.hash="=b.hash&&a.set(Sc,b.R))}},nd=function(a,b){b=Cc(P(a,b));var"" b?["ga1",c,b].join("."):""},xd="function(a,b){return" na(b,p(a,w),p(a,yb))},na="function(a,b,c){if(!a||1">a.length)J(12);else{for(var d=[],e=0;e<a.length;e++){var 0="=g||l.H[c]<g?(e=[l],g=l.H[c]):l.H[c]==g&&e.push(l)}return" 1="=g.length&&(g[1]=" 1"),g[0]*="1,g[1]*=1,ca={H:g,s:ca.join(".")}):ca=kd.test(g)?{H:[0,0],s:g}:void"" g="a[e];var" ca="g.split(" .");var"="" l="ca.shift();(" ga1"="=l||"1"==l)&&1<ca.length?(g=ca.shift().split("-"),"" 0;ca&&d.push(ca)}if(1="=d.length)return" j(13),d[0].s;if(0="=d.length)J(12);else{J(14);d=Gc(d,lc(b).split(" .").length,0);if(1="=d.length)return"" d[0].s;d="Gc(d,jc(c),1);1<d.length&&J(41);return" d[0]&&d[0].s}}},gc="function(a,b,c){for(var" d="[],e=[],g,ca=0;ca<a.length;ca++){var" 0<d.length?d:e},lc="function(a){return" a.indexof(".")?a.substr(1):a},id="function(){var" a="[],b=xa().split(" .");if(4="=b.length){var"" c="b[b.length-1];if(parseInt(c,10)==c)return[" none"]}for(c="b.length-2;0<=c;c--)a.push(b.slice(c).join("."));b=M.location.hostname;eb.test(b)||vc.test(b)||a.push("none");return"" a},kc="function(a){if(!a)return" ";1<a.length&&a.lastindexof("="" ")="=a.length-1&&(a=a.substr(0,a.length-1));0!=a.indexOf("/")&&(a="/"+a);return"" a},jc="function(a){a=kc(a);return" "="=a?1:a.split("/").length},le=function(a){a.ta&&J(77);a.na&&"" j(74);a.pa&&j(73);a.ua&&j(69)};function="" xc(a,b,c){"none"="=b&&(b=" ");var"="">=a&&d.push({hash:ca[0],R:e[g],O:ca})}if(0!=d.length)return 1==d.length?d[0]:Zc(b,d)||Zc(c,d)||Zc(null,d)||d[0]}function Zc(a,b){if(null==a)var c=a=1;else c=La(a),a=La(D(a,".")?a.substring(1):"."+a);for(var d=0;d<b.length;d++)if(b[d].hash==c||b[d].hash==a)return 0="=e||" "="==e?0:Number(e)}var"" b[d]};var="" jc="new" regexp(="" ^https?:\="" \="" ([^\="" :]+)="" ),de="O.google_tag_data.glBridge,Kc=/(.*)([?&#])(?:_ga=[^&#]*)(?:&?)(.*)/,od=/(.*)([?&#])(?:_gac=[^&#]*)(?:&?)(.*)/;function" bc(a){if(a.get(ze))return="" j(35),de.generate($e(a));var="" b="P(a,Q),c=P(a,I)||" ";b="_ga=2." +k(pa(c+b,0)+"."+c+"-"+b);(a="af(a))?(J(44),a="&_gac=1."+K([pa(a.qa,0),a.timestamp,a.qa].join("."))):a="";return"" b+a}="" function="" ic(a,b){var="" c="new" date,d="O.navigator,e=d.plugins||[];a=[a,d.userAgent,c.getTimezoneOffset(),c.getYear(),c.getDate(),c.getHours(),c.getMinutes()+b];for(b=0;b<e.length;++b)a.push(e[b].description);return" la(a.join("."))}function="" pa(a,b){var="" la([a,d.useragent,d.language||"",c.gettimezoneoffset(),c.getyear(),c.getdate()+math.floor(e="" 24),(24+e)%24,(60+c.getminutes()+b)%60].join("."))}="" var="" dc="function(a){J(48);this.target=a;this.T=!1};Dc.prototype.ca=function(a,b){if(a){if(this.target.get(Ze))return" de.decorate($e(this.target),a,b);if(a.tagname){if("a"="=a.tagName.toLowerCase()){a.href&&(a.href=qd(this,a.href,b));return}if(" form"="=a.tagName.toLowerCase())return"" rd(this,a)}if("string"="=typeof" a)return="" qd(this,a,b)}};="" qd="function(a,b,c){var" d="Kc.exec(b);d&&3<=d.length&&(b=d[1]+(d[3]?d[2]+d[3]:" "));(d="od.exec(b))&&3<=d.length&&(b=d[1]+(d[3]?d[2]+d[3]:""));a=a.target.get("linkerParam");var"" e="b.indexOf(" ?");d="b.indexOf("#");c?b+=(-1==d?"#":"&")+a:(c=-1==e?"?":"&",b=-1==d?b+(c+a):b.substring(0,d)+c+a+b.substring(d));b=b.replace(/&+_ga=/,"&_ga=");return"" g="b.childNodes||[],ca=!1,l=0;l<g.length;l++)if(g[l].name==d){g[l].setAttribute(" value",e);ca="!0;break}ca||(g=M.createElement("input"),g.setAttribute("type","hidden"),g.setAttribute("name",d),g.setAttribute("value",e),b.appendChild(g))}}else"post"==b.method.toLowerCase()&&(b.action=qd(a,b.action))};"" dc.prototype.s="function(a,b,c){function" d(g){try{g="g||O.event;a:{var" ca="g.target||g.srcElement;for(g=100;ca&&0<g;){if(ca.href&&ca.nodeName.match(/^a(?:rea)?$/i)){var" l="ca;break" a}ca="ca.parentNode;g--}l={}}(" http:"="=l.protocol||"https:"==l.protocol)&&sd(a,l.hostname||"")&&l.href&&(l.href=qd(e,l.href,b))}catch(k){J(26)}}var"" $e(e.target)},a,b?"fragment":"",c):(this.t||(this.t="!0,L(M," mousedown",d,!1),l(m,"keyup",d,!1)),c&&l(m,"submit",function(g){g=" g||o.event;if((g=" g.target||g.srcelement)&&g.action){var"="" sd(a,b){if(b="=M.location.hostname)return!1;for(var" regexp){if(a[c].test(b))return!0}else="" if(0<="b.indexOf(a[c]))return!0;return!1}function" ke(a,b){return="" b!="Ic(a,0)&&b!=Ic(a,-1)&&b!=Ic(a,-2)&&b!=pa(a,0)&&b!=pa(a,-1)&&b!=pa(a,-2)}" $e(a){var="" c._ga="a.get(Q),c._gid=a.get(I)||void" 0,c._gac="b?[b.qa,b.timestamp].join(" ."):void"="" 0,c._fplc="Ee(),c}function" af(a){function="" b(e){return="" void="" date).gettime())j(76);else="" return{timestamp:d,qa:c}}};var="" p="/^(GTM|OPT)-[A-Z0-9]+$/,q=/;_gaexp=[^;]*/g,r=/;((__utma=)|([^;=]+=GAX?\d+\.))[^;]*/g,Aa=/^https?:\/\/[\w\-.]+\.google.com(:\d+)?\/optimize\/opt-launch\.html\?.*$/,t=function(a){function" b(d,e){e&&(c+="&" +d+"="+K(e))}var c=" https:="" www.google-analytics.com="" gtm="" js?id="+K(a.id);" datalayer"!="a.B&&b(" l",a.b);b("t",a.target);b("cid",a.clientid);b("cidt",a.ka);b("gac",a.la);b("aip",a.ia);a.sync&&b("m","sync");b("cycle",a.g);a.qa&&b("gclid",a.qa);aa.test(m.referrer)&&b("cb",string(hd()));return"="" c};var="" jd="function(a,b,c){this.aa=b;(b=c)||(b=(b=P(a,V))&&" t0"!="b?Wd.test(b)?"_gat_"+Cc(P(a,Na)):"_gat_"+Cc(b):"_gat");this.Y=b;this.ra=null},Rd=function(a,b){var"" g});var="" ta(re(a,e,0));e.set(ed,"",!0)}return="" g})},pd="function(a,b,c){!1===b.get(Ud)||" b.get(c)||("1"="=Ca(a.Y)[0]?b.set(c," ",!0):b.set(c,""+hd(),!0))},qd="function(a,b){se(b)&&zc(a.Y,"1",P(b,Yb),P(b,W),P(b,Na),6E4,P(b,Be))},se=function(a){return!!a.get(ed)&&!1!==a.get(Ud)},re=function(a,b,c){var"" ee,e="function(ca){$a(ca).F&&d.set($a(ca).F,b.get(ca))};e(hb);e(ib);e(Na);e(Q);e(ed);if(0==c||1==c)e(Ad),e(ia),e(I);d.set($a(ld).F,Td(b));var" ;d.map(function(ca,l){g+="K(ca)+" =";g+="K(""+l)+"&"});g+="z="+hd();0==c?g=a.aa+g:1==c?g="t=dc&aip=1&_r=3&"+g:2==c&&(g="t=sr&aip=1&_r=4&slf_rd=1&"+"" g);return="" g},h="function(a,b){null===a.ra&&(a.ra=1===Ed(b),a.ra&&J(33));return" a.ra},wd="/^gtm\d+$/;var" fd="function(a,b){a=a.b;if(!a.get(" dcloaded")){var"="" $c(dd(a));c.set(29);a.set(gd,c.w);b="b||{};var" d;b[u]&&(d="Cc(b[U]));b=new" jd(a,"https:="" stats.g.doubleclick.net="" r="" collect?t="dc&aip=1&_r=3&" ,d);rd(b,a);a.set("dcloaded",!0)}};var"="" sd="function(a){if(!a.get(" dcloaded")&&"cookie"="=a.get(ac)){var"" jd(a);pd(b,a,ed);pd(b,a,ia);qd(b,a);if(se(a)){var="" lc="function(){var" a="O.gaGlobal=O.gaGlobal||{};return" a.hid="a.hid||hd()};var" wb="/^(UA|YT|MO|GP)-(\d+)-(\d+)$/,pc=function(a){function" b(e,g){d.b.data.set(e,g)}function="" c(e,g){b(e,g);d.filters.add(e)}var="" ya;this.filters="new" ha;b(v,a[v]);b(na,sa(a[na]));b(u,a[u]);b(w,a[w]||xa());b(yb,a[yb]);b(zb,a[zb]);b(hd,a[hd]);b(be,a[be]);b($b,a[$b]);b(wc,a[wc]);b(bc,a[bc]);b(cc,a[cc]);b(ka,a[ka]);b(dc,a[dc]);b(ec,a[ec]);b(ac,a[ac]);b(ad,a[ad]);b(n,a[n]);b(kd,a[kd]);b(je,a[je]);b(ze,a[ze]);b(oe,a[oe]);b(hb,1);b(ib,"j82");c(qb,ma);c(oa,ua);c(dd,cd);c(rb,oa);c(md,vb);="" c(sb,nc);c(uc,yc);c(tb,ja);c(vb,ta);c(vc,hc);c(zd,yd);c(ld,sd);c(ze,fe);c(wb,pa);c(xb,sa);c(cd,fd(this));pd(this.b);td(this.b,a[q]);this.b.set(jb,lc())},td="function(a,b){var" 0!="c?(J(10),c=c.O[1]+" ."+c.o[2]):c="void"" 0}c&&(hc="!0);if(d=c&&!a.get(Hd))if(d=c.split(" ."),2!="d.length)d=!1;else"" if(d="Number(d[1])){var" date).gettime()="" 1e3}else="" 0);c&&(a.data.set(xd,c),a.data.set(q,c),(c="uc(a))&&a.data.set(I,c));if(a.get(je)&&(c=a.get(ce),d=a.get(ie),!c||d&&" aw.ds"!="d)){c={};if(M){d=[];e=M.cookie.split(";");for(var"" e[1]));if(d="d._fplc)J(83),a.data.set(Ae,d);if(c)b:if(d=c.indexOf(" ."),-1="=d)J(22);else{e=c.substring(0,d);g=c.substring(d+1);d=g.indexOf(".");c=g.substring(0,d);g=g.substring(d+1);if("1"==e){if(d=g,ke(d,c)){J(23);break"" b}}else="" if("2"="=e){d=g.indexOf(" -");e="" ;0<d?(e="g.substring(0,d),d=g.substring(d+1)):d=g.substring(1);if(ke(e+d,c)){J(53);break"" b}e&&(j(2),a.data.set(i,e))}else{j(22);break="" b}j(11);a.data.set(q,d);if(c="be(" _gac",!!a.get(cc)))c="c.split("."),"1"!=c[0]||4!=c.length?J(72):ke(c[3],c[1])?"" j(71):(a.data.set(ce,c[3]),a.data.set(fe,c[2]),j(70))}}else="" j(21);b&&(j(9),a.data.set(q,k(b)));a.get(q)||(b="(b=O.gaGlobal)&&b.from_cookie&&" cookie"!="=P(a,ac)?void"" 0:(b="b&&b.vid)&&-1!==b.search(jd)?b:void" 0,b?(j(17),a.data.set(q,b)):(j(8),a.data.set(q,ra())));a.get(i)||(j(3),a.data.set(i,ra()));mc(a);b="O.gaGlobal=O.gaGlobal||{};c=P(a,Q);a=c===P(a,xd);if(void" if(d){var="">=ca[0]||0>=ca[1]?"":ca.join("x");a.set(rb,c);a.set(tb,fc());a.set(ob,M.characterSet||M.charset);a.set(sb,b&&
"function"===typeof b.javaEnabled&&b.javaEnabled()||!1);a.set(nb,(b&&(b.language||b.browserLanguage)||"").toLowerCase());a.data.set(ce,be("gclid",!0));a.data.set(ie,be("gclsrc",!0));a.data.set(fe,Math.round((new Date).getTime()/1E3));if(d&&a.get(cc)&&(b=M.location.hash)){b=b.split(/[?&#]+/);d=[];for(c=0;c<b.length;++c)(d(b[c],"utm_id")||d(b[c],"utm_campaign")||d(b[c],"utm_source")||d(b[c],"utm_medium")||d(b[c],"utm_term")||d(b[c],"utm_content")||d(b[c],"gclid")||d(b[c],"dclid")||d(b[c],"gclsrc"))&& d.push(b[c]);0<d.length&&(b="#" +d.join("&"),a.set(kb,a.get(kb)+b))}};pc.prototype.get="function(a){return" this.b.get(a)};pc.prototype.set="function(a,b){this.b.set(a,b)};var" me="{pageview:[mb],event:[ub,xb,yb,zb],social:[Bb,Cb,Db],timing:[Mb,Nb,Pb,Ob]};" pc.prototype.send="function(a){if(!(1">arguments.length)){if("string"===typeof arguments[0]){var b=arguments[0];var c=[].slice.call(arguments,1)}else b=arguments[0]&&arguments[0][Va],c=arguments;b&&(c=za(me[b]||[],c),c[Va]=b,this.b.set(c,void 0,!0),this.filters.D(this.b),this.b.data.m={})}};pc.prototype.ma=function(a,b){var c=this;u(a,c,b)||(v(a,function(){u(a,c,b)}),y(String(c.get(V)),a,void 0,b,!0))};var rc=function(a){if("prerender"==M.visibilityState)return!1;a();return!0},z=function(a){if(!rc(a)){J(16);var b=!1,c=function(){if(!b&&rc(a)){b=!0;var d=c,e=M;e.removeEventListener?e.removeEventListener("visibilitychange",d,!1):e.detachEvent&&e.detachEvent("onvisibilitychange",d)}};L(M,"visibilitychange",c)}};var te=/^(?:(\w+)\.)?(?:(\w+):)?(\w+)$/,sc=function(a){if(ea(a[0]))this.u=a[0];else{var b=te.exec(a[0]);null!=b&&4==b.length&&(this.c=b[1]||"t0",this.K=b[2]||"",this.methodName=b[3],this.a=[].slice.call(a,1),this.K||(this.A="create"==this.methodName,this.i="require"==this.methodName,this.g="provide"==this.methodName,this.ba="remove"==this.methodName),this.i&&(3<=this.a.length?(this.x=this.a[1],this.w=this.a[2]):this.a[1]&&(qa(this.a[1])?this.x=this.a[1]:this.w=this.a[1])));b=a[1];a=a[2];if(!this.methodname)throw"abort"; if(this.i&&(!qa(b)||""="=b))throw" abort";if(this.g&&(!qa(b)||""="=b||!ea(a)))throw"abort";if(ud(this.c)||ud(this.K))throw"abort";if(this.g&&"t0"!=this.c)throw"abort";}};function"" ud(a){return="" 0<="a.indexOf(" .")||0<="a.indexOf(":")};var"" yd,zd,$d,a;yd="new" ee;$d="new" ee;a="new" ee;zd="{ec:45,ecommerce:46,linkid:47};" var="" u="function(a,b,c){b==N||b.get(V);var" d="Yd.get(a);if(!ea(d))return!1;b.plugins_=b.plugins_||new" ee;if(b.plugins_.get(a))return!0;b.plugins_.set(a,new="" d(b,c||{}));return!0},y="function(a,b,c,d,e){if(!ea(Yd.get(b))&&!$d.get(b)){Zd.hasOwnProperty(b)&&J(Zd[b]);a=N.j(a);if(p.test(b)){J(52);if(!a)return!0;c=d||{};d={id:b,B:c.dataLayer||" datalayer",ia:!!a.get("anonymizeip"),sync:e,g:!1};a.get("&gtm")="=b&&(d.G=!0);var"" g="String(a.get(" name"));"t0"!="g&&(d.target=g);G(String(a.get("trackingId")))||(d.clientId="" string(a.get(q)),d.ka="Number(a.get(n)),c=c.palindrome?r:q,c=(c=M.cookie.replace(/^|(;" +)="" g,";").match(c))?c.sort().join("").substring(1):void="" 0,d.la="c,d.qa=E(a.b.get(kb)||" ","gclid"));c="d.B;g=(new"" date).gettime();o[c]="O[c]||[];g={" gtm.start":g};e||(g.event="gtm.js" );o[c].push(g);c="t(d)}!c&&Zd.hasOwnProperty(b)?(J(39),c=b+".js"):J(43);if(c){if(a){var"" ca="a.get(oe);qa(ca)||(ca=void" 0)}c&&0<="c.indexOf(" ")||(c="(ca||bd(!1))+"/plugins/ua/"+c);ca=ae(c);a=ca.protocol;d=M.location.protocol;if(("https:"==a||"" a="=d||(" http:"!="a?0:"http:"==d))&&B(ca)){if(ca=ca.url)a=(a=M.querySelector&&M.querySelector("script[nonce]")||null)?a.nonce||a.getAttribute&&a.getAttribute("nonce")||"":"",e?(e="",a&&Nd.test(a)&&(e='"" nonce="'+a+'" '),f.test(ca)&&m.write("<script"+e+'="" src="'+ca+'">\x3c/script>')):(e=M.createElement("script"),e.type="text/javascript",e.async=!0,e.src=ca,a&&e.setAttribute("nonce",a),ca=M.getElementsByTagName("script")[0],ca.parentNode.insertBefore(e,ca));$d.set(b,!0)}}}},v=function(a,b){var c=A.get(a)||
[];c.push(b);A.set(a,c)},C=function(a,b){Yd.set(a,b);b=A.get(a)||[];for(var c=0;c<b.length;c++)b[c]();a.set(a,[])},b=function(a){var b="ae(M.location.href);if(D(a.url," https:="" www.google-analytics.com="" gtm="" js?id="))return!0;if(a.query||0<=a.url.indexOf(" ?")||0<="a.path.indexOf("://"))return!1;if(a.host==b.host&&a.port==b.port)return!0;b="http:"==a.protocol?80:443;return"www.google-analytics.com"==a.host&&(a.port||b)==b&&D(a.path,"/plugins/")?!0:!1},ae=function(a){function"" b(l){var="" k="l.hostname||" ",w=" 0<=" k.indexof("]");k="k.split(w?"]":":")[0].toLowerCase();w&&(k+="]");w=(l.protocol||"").toLowerCase();w=1*l.port||("http:"==w?80:"https:"==w?443:"");l=l.pathname||"";D(l,"/")||(l="/"+l);return[k,""+w,l]}var"" c="M.createElement(" a");c.href="M.location.href;var"" d="(c.protocol||" ").tolowercase(),e="b(c),g=c.search||"",ca=d+"//"+e[0]+(e[1]?":"+e[1]:"");D(a,"//")?a=d+a:D(a,"/")?a=ca+a:!a||D(a,"?")?a=ca+e[2]+(a||g):0"">a.split("/")[0].indexOf(":")&&(a=ca+e[2].substring(0,e[2].lastIndexOf("/"))+"/"+a);c.href=a;
d=b(c);return{protocol:(c.protocol||"").toLowerCase(),host:d[0],port:d[1],path:d[2],query:c.search||"",url:a||""}};var Z={ga:function(){Z.f=[]}};Z.ga();Z.D=function(a){var b=Z.J.apply(Z,arguments);b=Z.f.concat(b);for(Z.f=[];0<b.length&&!z.v(b[0])&&!(b.shift(),0<z.f.length););z.f=z.f.concat(b)};z.j=function(a){for(var b="[],c=0;c<arguments.length;c++)try{var" d="new" sc(arguments[c]);d.g?c(d.a[0],d.a[1]):(d.i&&(d.ha="y(d.c,d.a[0],d.X,d.W)),b.push(d))}catch(e){}return" b};="" z.v="function(a){try{if(a.u)a.u.call(O,N.j(" t0"));else{var"="" if(a.ba)n.remove(a.c);else="" if(b)if(a.i){if(a.ha&&(a.ha="y(a.c,a.a[0],a.X,a.W)),!u(a.a[0],b,a.W))return!0}else" if(a.k){var="" c="a.methodName,d=a.a,e=b.plugins_.get(a.K);e[c].apply(e,d)}else" b[a.methodname].apply(b,a.a)}}catch(g){}};var="" n="function(a){J(1);Z.D.apply(Z,[arguments])};N.h={};N.P=[];N.L=0;N.ya=0;N.answer=42;var" we="[Na,W,V];N.create=function(a){var" +b[v];if(n.h[c])return="" n.h[c];if(da(b))return="" null;b="new" pc(b);n.h[c]="b;N.P.push(b);c=qc().tracker_created;if(ea(c))try{c(b)}catch(d){}return" b};n.remove="function(a){for(var" n.h[a]};n.getall="function(){return" n.p.slice(0)};="" n.n="function(){" ga"!="gb&&J(49);var"" a="O[gb];if(!a||42!=a.answer){N.L=a&&a.l;N.ya=1*new" date;n.loaded="!0;var">c;c++){var d=b[c].src;if(d&&0==d.indexOf(bd(!0)+
"/analytics")){b=!0;break a}}b=!1}b&&(Ba=!0)}(O.gaplugins=O.gaplugins||{}).Linker=Dc;b=Dc.prototype;C("linker",Dc);X("decorate",b,b.ca,20);X("autoLink",b,b.S,25);C("displayfeatures",fd);C("adfeatures",fd);a=a&&a.q;ka(a)?Z.D.apply(N,a):J(50)}};N.da=function(){for(var a=N.getAll(),b=0;b</b.length&&!z.v(b[0])&&!(b.shift(),0<z.f.length););z.f=z.f.concat(b)};z.j=function(a){for(var></b.length;c++)b[c]();a.set(a,[])},b=function(a){var></=this.a.length?(this.x=this.a[1],this.w=this.a[2]):this.a[1]&&(qa(this.a[1])?this.x=this.a[1]:this.w=this.a[1])));b=a[1];a=a[2];if(!this.methodname)throw"abort";></b.length;++c)(d(b[c],"utm_id")||d(b[c],"utm_campaign")||d(b[c],"utm_source")||d(b[c],"utm_medium")||d(b[c],"utm_term")||d(b[c],"utm_content")||d(b[c],"gclid")||d(b[c],"dclid")||d(b[c],"gclsrc"))&&></b.length;d++)if(b[d].hash==c||b[d].hash==a)return></a.length;e++){var></e(p(b,kb),"gclid").length;(c||d)&&gc(function(e){c&&a.send("timing",e);d&&a.send("adtiming",e)})}}};var></c?(y(b,gb),y(b,jb),y(b,ib),y(b,fb),y(b,hb),y(b,kb),y(b,lb),y(b,ve),y(b,we),y(b,xe),y(b,ye),va(function(){a(b)},10)):l(o,"load",function(){gc(a)},!1))}},ec=function(a){var></ve.length;c++){var></c.length&&(b=b.concat(c.split(",")));c=[];for(var></d.count++)ge("xhr","tmr",""+d.count),c();else></this.w.length;b++)this.w[b]&&(a[math.floor(b></b;++f)if(e===r(g,f)){var></f.length;e++){var></a.length;c++)b=b></6&192|h)))}};var></4&240|g></a.length;){var></2|h></4|g></b.length;d++)if(b[d]===c){b=d;break>]]></content>
    </entry>
    
  
</search>
